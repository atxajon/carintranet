<?php

/**
 * @file
 * Provides functionality needed for Carbray informes.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;

function get_count_captaciones_activas($uid, $filter_by = []) {
  // Captaciones activas are the ones that are not archived AND the ones that do not have an expediente yet.
  $captaciones_activas_query = \Drupal::database()->select('users', 'u');
  $captaciones_activas_query->addExpression('count(cc.entity_id)', '');
  $captaciones_activas_query->innerJoin('node__field_captacion_captador', 'cc', 'cc.field_captacion_captador_target_id = u.uid');
  $captaciones_activas_query->innerJoin('node__field_captacion_estado_captacion', 'ec', 'ec.entity_id = cc.entity_id');
  $captaciones_activas_query->condition('u.uid', $uid);

  $subquery = \Drupal::database()->select('node__field_expediente_captacion', 'ec');
  $subquery->addField('ec', 'field_expediente_captacion_target_id');
  $captaciones_activas_query->condition('cc.entity_id', $subquery, 'NOT IN');

  $captaciones_activas_query->condition('field_captacion_estado_captacion_target_id', CAPTACION_ARCHIVADA, '!=');
  // Filter by dates.
  if (isset($filter_by['date_from']) OR isset($filter_by['date_to'])) {
    $captaciones_activas_query->innerJoin('node_field_data', 'nfd', 'nfd.nid = cc.entity_id');
    if (isset($filter_by['date_from'])) {
      $captaciones_activas_query->condition('nfd.created', $filter_by['date_from'], '>');
    }
    if (isset($filter_by['date_to'])) {
      $captaciones_activas_query->condition('nfd.created', $filter_by['date_to'], '<');
    }
  }
  $count_captaciones_activas = $captaciones_activas_query->execute()->fetchField();
  return $count_captaciones_activas;
}

function get_count_captaciones_activas_by_country($country, $filter_by = []) {
  // Captaciones activas are the ones that are not archived AND the ones that do not have an expediente yet.
  $captaciones_activas_query = \Drupal::database()->select('user__field_pais', 'p');
  $captaciones_activas_query->addExpression('count(p.field_pais_value)', '');
  $captaciones_activas_query->innerJoin('node__field_captacion_cliente', 'cc', 'cc.field_captacion_cliente_target_id = p.entity_id');
  $captaciones_activas_query->innerJoin('node__field_captacion_estado_captacion', 'ec', 'ec.entity_id = cc.entity_id');

  $captaciones_activas_query->condition('p.field_pais_value', $country, '=');


  $subquery = \Drupal::database()->select('node__field_expediente_captacion', 'ec');
  $subquery->addField('ec', 'field_expediente_captacion_target_id');
  $captaciones_activas_query->condition('cc.entity_id', $subquery, 'NOT IN');

  $captaciones_activas_query->condition('field_captacion_estado_captacion_target_id', CAPTACION_ARCHIVADA, '!=');
  // Filter by dates.
  if (isset($filter_by['date_from']) OR isset($filter_by['date_to'])) {
    $captaciones_activas_query->innerJoin('node_field_data', 'nfd', 'nfd.nid = cc.entity_id');
    if (isset($filter_by['date_from'])) {
      $captaciones_activas_query->condition('nfd.created', $filter_by['date_from'], '>');
    }
    if (isset($filter_by['date_to'])) {
      $captaciones_activas_query->condition('nfd.created', $filter_by['date_to'], '<');
    }
  }
  $count_captaciones_activas = $captaciones_activas_query->execute()->fetchField();
  return $count_captaciones_activas;
}

function get_captaciones_activas_by_country($country, $filter_by = []) {
  $sql = "SELECT DISTINCT cc.entity_id as captacion_nid
FROM node__field_captacion_cliente cc
INNER JOIN node__field_captacion_estado_captacion ec ON ec.entity_id = cc.entity_id
INNER JOIN node__field_captacion_captador captador on cc.entity_id = captador.entity_id 
INNER JOIN node_field_data nfd on nfd.nid = cc.entity_id
WHERE field_captacion_cliente_target_id IN (SELECT entity_id as cliente_uid FROM user__field_pais fpais WHERE fpais.field_pais_value = :country)
AND cc.entity_id NOT IN (SELECT ec.field_expediente_captacion_target_id AS field_expediente_captacion_target_id
FROM 
node__field_expediente_captacion ec) 
AND field_captacion_estado_captacion_target_id != '184'";
  $params = get_country_date_params($country, $sql, $filter_by);
  $captaciones_activas = \Drupal::database()->query($params['sql'], $params['params'])->fetchCol();
  return $captaciones_activas;
}

function get_captaciones_archivadas_by_country($country, $filter_by = []) {
  $sql = "SELECT DISTINCT cc.entity_id as captacion_nid
FROM node__field_captacion_cliente cc
INNER JOIN node__field_captacion_estado_captacion ec ON ec.entity_id = cc.entity_id
INNER JOIN node__field_captacion_captador captador on cc.entity_id = captador.entity_id 
INNER JOIN node_field_data nfd on nfd.nid = cc.entity_id
WHERE field_captacion_cliente_target_id IN (SELECT entity_id as cliente_uid FROM user__field_pais fpais WHERE fpais.field_pais_value = :country)
AND field_captacion_estado_captacion_target_id = '184'";
  $params = get_country_date_params($country, $sql, $filter_by);
  $captaciones_archivadas = \Drupal::database()->query($params['sql'], $params['params'])->fetchCol();
  return $captaciones_archivadas;
}

function get_expedientes_activos_by_country($country, $filter_by = []) {
  $sql = "SELECT DISTINCT ec.entity_id as expediente_nid
FROM node__field_expediente_captacion ec 
INNER JOIN node__field_captacion_cliente cc on cc.entity_id = ec.field_expediente_captacion_target_id
INNER JOIN node_field_data nfd on nfd.nid = cc.entity_id
WHERE field_captacion_cliente_target_id IN (SELECT entity_id as cliente_uid FROM user__field_pais fpais WHERE fpais.field_pais_value = :country)";
  $params = get_country_date_params($country, $sql, $filter_by);
  $expedientes_activos = \Drupal::database()->query($params['sql'], $params['params'])->fetchCol();
  return $expedientes_activos;
}

function get_facturas_emitidas_by_country($country, $filter_by = []) {
  $sql = "SELECT DISTINCT f.entity_id
 FROM node__field_factura f 
INNER JOIN node__field_captacion_cliente cc on cc.entity_id = f.field_factura_target_id
INNER JOIN node_field_data nfd on nfd.nid = cc.entity_id 
WHERE field_captacion_cliente_target_id IN (SELECT entity_id as cliente_uid FROM user__field_pais fpais WHERE fpais.field_pais_value = :country)";
  $params = get_country_date_params($country, $sql, $filter_by);
  $facturas_emitidas = \Drupal::database()->query($params['sql'], $params['params'])->fetchCol();
  return $facturas_emitidas;
}

function get_facturas_pagadas_by_country($country, $filter_by = []) {
  $sql = "SELECT DISTINCT f.entity_id
 FROM node__field_factura f 
 INNER JOIN node__field_factura_pagada fp on f.entity_id = fp.entity_id
INNER JOIN node__field_captacion_cliente cc on cc.entity_id = f.field_factura_target_id 
INNER JOIN node_field_data nfd on nfd.nid = cc.entity_id 
WHERE field_captacion_cliente_target_id IN (SELECT entity_id as cliente_uid FROM user__field_pais fpais WHERE fpais.field_pais_value = :country) 
AND field_factura_pagada_value = 1";
  $params = get_country_date_params($country, $sql, $filter_by);
  $facturas_pagadas = \Drupal::database()->query($params['sql'], $params['params'])->fetchCol();
  return $facturas_pagadas;
}

function get_country_date_params($country, $sql, $date_filters = []) {
  $return['params'][':country'] = $country;
  if ($date_filters) {
    if (isset($date_filters['date_from'])) {
      $sql .= " AND created > :date_from";
      $return['params'][':date_from'] = $date_filters['date_from'];
    }
    if (isset($date_filters['date_to'])) {
      $sql .= " AND created < :date_to";
      $return['params'][':date_to'] = $date_filters['date_to'];
    }
  }
  $return['sql'] = $sql;
  return $return;
}

function get_departamento_for_captacion($captacion_nid) {
  // Should this not be 'get_departamentoS_for_captacion? there could be many captadores from many departamentos. Should be fetchAll()...
  // Update: leaving this as it is, in a strange case that a captacion has many captadores from many departments we only grab the first one found in the system.
  $sql = "SELECT field_departamento_target_id as dept_tid
FROM user__field_departamento dep
INNER JOIN node__field_captacion_captador capt on capt.field_captacion_captador_target_id = dep.entity_id
WHERE capt.entity_id = $captacion_nid";
  $departamento = \Drupal::database()->query($sql)->fetchField();
  return $departamento;
}

function get_departamento_for_expediente($expediente_nid) {
  $sql = "SELECT DISTINCT field_departamento_target_id as dept_tid
FROM user__field_departamento dep
INNER JOIN node__field_expediente_responsable resp on resp.field_expediente_responsable_target_id = dep.entity_id
WHERE resp.entity_id = $expediente_nid";
  $departamento = \Drupal::database()->query($sql)->fetchField();
  return $departamento;
}

function get_departamento_for_factura($factura_nid) {
  $sql = "SELECT DISTINCT field_departamento_target_id as dept_tid
FROM user__field_departamento dep
INNER JOIN node__field_captacion_captador capt on capt.field_captacion_captador_target_id = dep.entity_id
INNER JOIN node__field_factura fact on fact.field_factura_target_id = capt.entity_id
WHERE fact.entity_id = $factura_nid";
  $departamento = \Drupal::database()->query($sql)->fetchField();
  return $departamento;
}


function get_count_captaciones_archivadas($uid, $filter_by = []) {
  $carchivadas_query = \Drupal::database()->select('users', 'u');
  $carchivadas_query->addExpression('count(cc.entity_id)', 'carchivadas');
  $carchivadas_query->innerJoin('node__field_captacion_captador', 'cc', 'cc.field_captacion_captador_target_id = u.uid');
  $carchivadas_query->innerJoin('node__field_captacion_estado_captacion', 'ec', 'ec.entity_id = cc.entity_id');
  $carchivadas_query->condition('u.uid', $uid);
  $carchivadas_query->condition('ec.field_captacion_estado_captacion_target_id', CAPTACION_ARCHIVADA);
  // Filter by dates.
  if (isset($filter_by['date_from']) OR isset($filter_by['date_to'])) {
    $carchivadas_query->innerJoin('node_field_data', 'nfd', 'nfd.nid = cc.entity_id');
    if (isset($filter_by['date_from'])) {
      $carchivadas_query->condition('nfd.created', $filter_by['date_from'], '>');
    }
    if (isset($filter_by['date_to'])) {
      $carchivadas_query->condition('nfd.created', $filter_by['date_to'], '<');
    }
  }

  $count_captaciones_archivadas = $carchivadas_query->execute()->fetchField();
  return $count_captaciones_archivadas;
}

function get_count_captaciones_archivadas_by_country($country, $filter_by = []) {
  // Captaciones activas are the ones that are not archived AND the ones that do not have an expediente yet.
  $captaciones_activas_query = \Drupal::database()->select('user__field_pais', 'p');
  $captaciones_activas_query->addExpression('count(p.field_pais_value)', '');
  $captaciones_activas_query->innerJoin('node__field_captacion_cliente', 'cc', 'cc.field_captacion_cliente_target_id = p.entity_id');
  $captaciones_activas_query->innerJoin('node__field_captacion_estado_captacion', 'ec', 'ec.entity_id = cc.entity_id');

  $captaciones_activas_query->condition('p.field_pais_value', $country, '=');
  $captaciones_activas_query->condition('ec.field_captacion_estado_captacion_target_id', CAPTACION_ARCHIVADA);


  $subquery = \Drupal::database()->select('node__field_expediente_captacion', 'ec');
  $subquery->addField('ec', 'field_expediente_captacion_target_id');
  $captaciones_activas_query->condition('cc.entity_id', $subquery, 'NOT IN');

  // Filter by dates.
  if (isset($filter_by['date_from']) OR isset($filter_by['date_to'])) {
    $captaciones_activas_query->innerJoin('node_field_data', 'nfd', 'nfd.nid = cc.entity_id');
    if (isset($filter_by['date_from'])) {
      $captaciones_activas_query->condition('nfd.created', $filter_by['date_from'], '>');
    }
    if (isset($filter_by['date_to'])) {
      $captaciones_activas_query->condition('nfd.created', $filter_by['date_to'], '<');
    }
  }
  $count_captaciones_activas = $captaciones_activas_query->execute()->fetchField();
  return $count_captaciones_activas;
}

function get_count_expedientes_published($uid, $filter_by = []) {
  $expedientes_published_query = \Drupal::database()->select('users', 'u');
  $expedientes_published_query->addExpression('count(er.field_expediente_responsable_target_id)', 'expedientes_published');
  $expedientes_published_query->innerJoin('user__roles', 'ur', 'u.uid = ur.entity_id');
  $expedientes_published_query->innerJoin('node__field_expediente_responsable', 'er', 'er.field_expediente_responsable_target_id = u.uid');
  $expedientes_published_query->innerJoin('node_field_data', 'nfd', 'nfd.nid = er.entity_id');
  $expedientes_published_query->condition('u.uid', $uid);
  $expedientes_published_query->condition('nfd.status', 1);
  // Filter by dates.
  if (isset($filter_by['date_from']) OR isset($filter_by['date_to'])) {
    if (isset($filter_by['date_from'])) {
      $expedientes_published_query->condition('nfd.created', $filter_by['date_from'], '>');
    }
    if (isset($filter_by['date_to'])) {
      $expedientes_published_query->condition('nfd.created', $filter_by['date_to'], '<');
    }
  }
  else {
    // Exclude expedientes dated on migration from global count numbers.
    $expedientes_published_query->condition('nfd.created', 1500070102, '!=');
  }

  $count_expedientes_published = $expedientes_published_query->execute()->fetchField();
  return $count_expedientes_published;
}

function get_count_expedientes_archived($uid, $filter_by = []) {
  $expedientes_archived_query = \Drupal::database()->select('users', 'u');
  $expedientes_archived_query->addExpression('count(er.field_expediente_responsable_target_id)', 'expedientes_archived');
  $expedientes_archived_query->innerJoin('user__roles', 'ur', 'u.uid = ur.entity_id');
  $expedientes_archived_query->innerJoin('node__field_expediente_responsable', 'er', 'er.field_expediente_responsable_target_id = u.uid');
  $expedientes_archived_query->innerJoin('node_field_data', 'nfd', 'nfd.nid = er.entity_id');
  $expedientes_archived_query->condition('u.uid', $uid);
  $expedientes_archived_query->condition('nfd.status', 0);
  // Filter by dates.
  if (isset($filter_by['date_from']) OR isset($filter_by['date_to'])) {
    if (isset($filter_by['date_from'])) {
      $expedientes_archived_query->condition('nfd.created', $filter_by['date_from'], '>');
    }
    if (isset($filter_by['date_to'])) {
      $expedientes_archived_query->condition('nfd.created', $filter_by['date_to'], '<');
    }
  }
  $count_expedientes_archived = $expedientes_archived_query->execute()->fetchField();
  return $count_expedientes_archived;
}

function get_count_facturas_emitidas($uid, $filter_by = []) {
  $facturas_emitidas_query = \Drupal::database()->select('node_field_data', 'nfd');
  $facturas_emitidas_query->addExpression('COUNT(nid)', 'count_facturas');
  $facturas_emitidas_query->condition('type', 'factura');
  $facturas_emitidas_query->condition('uid', $uid);
  // Filter by dates.
  if (isset($filter_by['date_from']) OR isset($filter_by['date_to'])) {
    if (isset($filter_by['date_from'])) {
      $facturas_emitidas_query->condition('nfd.created', $filter_by['date_from'], '>');
    }
    if (isset($filter_by['date_to'])) {
      $facturas_emitidas_query->condition('nfd.created', $filter_by['date_to'], '<');
    }
  }
  $count_facturas_emitidas = $facturas_emitidas_query->execute()->fetchField();
  return $count_facturas_emitidas;
}

function get_count_facturas_pagadas($uid, $filter_by = []) {
  $facturas_pagadas_query = \Drupal::database()->select('node_field_data', 'nfd');
  $facturas_pagadas_query->addExpression('COUNT(nid)', 'count_facturas');
  $facturas_pagadas_query->innerJoin('node__field_factura_pagada', 'fp', 'nfd.nid = fp.entity_id');
  $facturas_pagadas_query->condition('type', 'factura');
  $facturas_pagadas_query->condition('uid', $uid);
  $facturas_pagadas_query->condition('field_factura_pagada_value', 1, '=');
  // Filter by dates.
  if (isset($filter_by['date_from']) OR isset($filter_by['date_to'])) {
    if (isset($filter_by['date_from'])) {
      $facturas_pagadas_query->condition('nfd.created', $filter_by['date_from'], '>');
    }
    if (isset($filter_by['date_to'])) {
      $facturas_pagadas_query->condition('nfd.created', $filter_by['date_to'], '<');
    }
  }
  $count_facturas_pagadas = $facturas_pagadas_query->execute()->fetchField();
  return $count_facturas_pagadas;
}


function get_informe_procedencia_count($dates = []) {
  $params = [];
  $sql = 'SELECT field_procedencia_value as name, Count(field_procedencia_value) as amount_count, (COUNT(*) / (SELECT COUNT(*) FROM user__field_procedencia)) * 100 AS percent FROM user__field_procedencia fp';
  if ($dates) {
    $sql .= '  INNER JOIN users_field_data ufd on fp.entity_id = ufd.uid
 INNER JOIN node__field_captacion_cliente ccliente on ufd.uid = ccliente.field_captacion_cliente_target_id
 INNER JOIN node_field_data nfd on nfd.nid = ccliente.entity_id
 WHERE nfd.created BETWEEN :date_from AND :date_to';
    $params = [':date_from' => $dates['date_from'], ':date_to' => $dates['date_to']];
  }

  $sql .= ' GROUP BY field_procedencia_value';

  $procedencia_clientes = \Drupal::database()->query($sql, $params)->fetchAll();
  return $procedencia_clientes;
}

function get_informe_procedencia() {
  $procedencia_clientes = \Drupal::database()->query("SELECT field_procedencia_value as name, created, fp.entity_id as cliente_uid, field_captacion_captador_target_id as captador_uid, ccliente.entity_id as captacion_nid, field_departamento_target_id as dept_tid
 FROM user__field_procedencia fp
 INNER JOIN users_field_data ufd on fp.entity_id = ufd.uid
 INNER JOIN node__field_captacion_cliente ccliente on ufd.uid = ccliente.field_captacion_cliente_target_id
INNER JOIN node__field_captacion_captador cc on cc.entity_id = ccliente.entity_id
INNER JOIN user__field_departamento dept on dept.entity_id = cc.field_captacion_captador_target_id ORDER BY name ASC, cliente_uid ASC")->fetchAll();
  return $procedencia_clientes;
}

function get_informe_servicios_count($dates = []) {
  $params = [];
  $sql = 'SELECT name, parent, Count(field_expediente_tematica_target_id) as amount_count,
(COUNT(*) / (SELECT COUNT(*) FROM node__field_expediente_tematica)) * 100 AS percent
 FROM node__field_expediente_tematica et 
 INNER JOIN taxonomy_term_field_data tfd on et.field_expediente_tematica_target_id = tfd.tid INNER JOIN taxonomy_term_hierarchy th on th.tid = tfd.tid';
  if ($dates) {
    $sql .= '  INNER JOIN node_field_data nfd on et.entity_id = nfd.nid
 WHERE nfd.created BETWEEN :date_from AND :date_to';
    $params = [':date_from' => $dates['date_from'], ':date_to' => $dates['date_to']];
  }

  $sql .= ' GROUP BY field_expediente_tematica_target_id, name, parent';

  $servicios_count = \Drupal::database()->query($sql, $params)->fetchAll();
  return $servicios_count;
}

function get_informe_servicios_for_tematica($tematica_tid, $dates = []) {
  $params = [];
  $sql = "SELECT name, Count(field_expediente_tematica_target_id) as amount_count
 FROM node__field_expediente_tematica et
 INNER JOIN taxonomy_term_field_data tfd on et.field_expediente_tematica_target_id = tfd.tid
 INNER JOIN node_field_data nfd on et.entity_id = nfd.nid
 INNER JOIN taxonomy_term_hierarchy th on th.tid = tfd.tid
 WHERE parent = $tematica_tid";
  if ($dates) {
    $sql .= ' AND nfd.created BETWEEN :date_from AND :date_to';
    $params = [':date_from' => $dates['date_from'], ':date_to' => $dates['date_to']];
  }

  $sql .= ' GROUP BY name';

  $servicios_for_tematica_count = \Drupal::database()->query($sql, $params)->fetchAll();
  return $servicios_for_tematica_count;
}

function get_count_expedientes_for_tematica($tematica_tid, $dates = []) {
  $params = [];
  $sql = "SELECT Count(field_expediente_tematica_target_id) as total_expedientes_for_tematica
 FROM node__field_expediente_tematica et
  INNER JOIN taxonomy_term_field_data tfd on et.field_expediente_tematica_target_id = tfd.tid
 INNER JOIN node_field_data nfd on et.entity_id = nfd.nid
 INNER JOIN taxonomy_term_hierarchy th on th.tid = tfd.tid
 WHERE parent = $tematica_tid";
  if ($dates) {
    $sql .= ' AND nfd.created BETWEEN :date_from AND :date_to';
    $params = [':date_from' => $dates['date_from'], ':date_to' => $dates['date_to']];
  }

  $count_expedientes = \Drupal::database()->query($sql, $params)->fetchField();
  return $count_expedientes;
}

/**
 * Given a selection of nids queries for the departamento they're for
 * and iterates through results to add them as total count.
 * @param $items
 *   Array with nids found for a country.
 * @param $type
 *   String referring to node type ('captacion', 'expediente'...
 *
 * @return $total
 *   Array mapping the department tid as key and the total acumulated items as value.
 */
function get_total_count_for_departamento($items, $type) {
  $total = [];
  $function_call = '';
  if ($type == 'captacion') {
    $function_call = 'get_departamento_for_captacion';
  }
  elseif ($type == 'expediente') {
    $function_call = 'get_departamento_for_expediente';
  }
  elseif ($type == 'factura') {
    $function_call = 'get_departamento_for_factura';
  }
  foreach ($items as $item) {
    $departamento = $function_call($item);
    if (!$departamento) {
      // Skip workers not assigned to a departamento.
      continue;
    }
    if (!array_key_exists($departamento, $total)) {
      // Initialise the count for this department.
      $total[$departamento] = 1;
    }
    else {
      // Increment count for this department.
      $total[$departamento]++;
    }
  }
  return $total;
}