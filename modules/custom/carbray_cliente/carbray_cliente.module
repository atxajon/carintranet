<?php

/**
 * @file
 * Provides functionality needed for Carbray clients.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing;
use Drupal\user\Entity\User;

/**
 * Implements hook_theme().
 */
function carbray_cliente_theme($existing, $type, $theme, $path) {
  return [
    'cliente_expediente' => [
      'variables' => [
        'expedientes' => NULL,
        'client_name' => NULL,
        'uid' => NULL,
      ],
    ],
    'button_modal' => [
      'variables' => [
        'button_text' => NULL,
        'unique_id' => NULL,
        'modal_title' => NULL,
        'modal_content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function carbray_cliente_entity_extra_field_info() {
  // Defines extra pseudo fields for display only purposes.
  // Exposes them to the user manage display ui.
  $extra = array();
  $extra['user']['user']['display']['cliente_expediente'] = array(
    'label' => t('Cliente expedientes'),
    'description' => t('Muestra los expedientes del cliente.'),
    'weight' => 100,
    'visible' => TRUE,
  );
  $extra['user']['user']['display']['anadir_nota'] = array(
    'label' => t('Añadir nota'),
    'description' => t('Boton para crear una nueva nota.'),
    'weight' => 100,
  );
  $extra['user']['user']['display']['user_role'] = array(
    'label' => t('User role'),
    'description' => t('Muestra el rol del usuario.'),
    'weight' => 100,
    'visible' => TRUE,
  );
  $extra['user']['user']['display']['assign_estado_captacion'] = array(
    'label' => t('Assign estado de captacion to client'),
    'description' => t('Estado de captacion.'),
    'weight' => 100,
    'visible' => TRUE,
  );
  return $extra;
}

/**
 * Implements hook_entity_view_mode_alter().
 *
 * @param $view_mode
 * @param EntityInterface $entity
 * @param $context
 */
function carbray_cliente_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  // Change view mode to 'cliente' if the user we are viewing is not a carbray internal admin user.
  if ($entity->getEntityTypeId() == 'user') {
    $path = \Drupal::request()->getpathInfo();
    $arg = explode('/', $path);
    $uid = end($arg);
    if (!is_numeric($uid)) {
      return;
    }

    $user = User::load($uid);
    $roles = $user->getRoles();
    // If user with only 1 role and it is authenticated:
    if (in_array('authenticated', $roles) && count($roles) == 1) {
      $fase = get_cliente_fase($uid);
      $view_mode = 'cliente_' . $fase;
    }
  }
}

/**
 * Implements hook_theme_suggestions_user_alter().
 *
 *   An array of alternate, more specific names for template files or theme
 *   functions.
 */
function carbray_cliente_theme_suggestions_user_alter(&$suggestions, $vars, $hook) {

  $mode = $vars['elements']['#view_mode'];

  // Create a user theme hook suggestion based on the field_fase value.
  $suggestions[] = 'user__' . $mode;
}

/**
 * Implements hook_user_view().
 */
function carbray_cliente_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $uid = $entity->id();
  // Viewing a client on captacion page.
  if ($view_mode === 'cliente_captacion') {
    if ($display->getComponent('anadir_nota')) {
      $form = \Drupal::formBuilder()
        ->getForm('Drupal\carbray_cliente\Form\NewNotaForm');
      $build['anadir_nota'] = [
        '#theme' => 'button_modal',
        '#unique_id' => 'anadir-nota-uid-' . $uid,
        '#button_text' => 'Añadir nota',
        '#modal_title' => t('Nueva nota'),
        '#modal_content' => $form,
      ];
    }
    if ($display->getComponent('assign_estado_captacion')) {
      $form = \Drupal::formBuilder()
        ->getForm('Drupal\carbray\Form\AssignEstadoCaptacion', $uid);
      $build['assign_estado_captacion'] = $form;
    }
  }
  elseif ($view_mode === 'cliente_produccion') {
    if ($display->getComponent('cliente_expediente')) {
      $expediente_nids = get_cliente_expediente_nids($uid);
      $expedientes = get_expedientes_data($expediente_nids);
      $user = User::load($uid);
      $nombre = $user->get('field_nombre')->value;
      $apellido = $user->get('field_apellido')->value;
      $client_name = ucfirst($nombre) . ' ' . ucfirst($apellido);
      $build['cliente_expediente'] = [
        '#theme' => 'cliente_expediente',
        '#expedientes' => $expedientes,
        '#client_name' => $client_name,
        '#uid' => $uid,
      ];
    }

  }
  // Viewing a carbray admin/worker.
  elseif ($view_mode === 'full') {
    if ($display->getComponent('user_role')) {
      // Look at the url (e.g user/9) and display its role on page.
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      $uid = 0;
      foreach ($path_args as $path_arg) {
        if (is_numeric($path_arg)) {
          $uid = $path_arg;
        }
      }
      $user = User::load($uid);
      $roles = $user->getRoles();
      if (in_array('worker', $roles)) {
        $build['user_role'] = array(
          '#markup' => '<div class="field--label">Rol</div><div class="field--item">Abogado</div>',
        );
      }
      elseif (in_array('carbray_administrator', $roles)) {
        $build['user_role'] = array(
          '#markup' => '<div class="field--label">Rol</div><div class="field--item">Administrador</div>',
        );
      }
    }
  }
}

/**
 * Get cliente fase.
 */
function get_cliente_fase($uid) {
  $db = \Drupal::database();
  $sql = "SELECT field_fase_value FROM user__field_fase WHERE entity_id = :uid";
  $fase_string = $db->query($sql, array(':uid' => $uid))
    ->fetchField();
  return $fase_string;
}

/**
 * Helper function to obtain expedientes for the given user uid.
 *
 * @param string $uid
 */
function get_cliente_expediente_nids($uid) {
  $bundle = 'expediente';
  $query = \Drupal::entityQuery('node');
  $query->condition('status', 1);
  $query->condition('type', $bundle);
  $query->condition('field_expediente_cliente', $uid);
  $expediente_nids = $query->execute();
  return $expediente_nids;
}

/**
 * Helper function to obtain all expedientes data from the nids.
 *
 * @param array $expediente_nids
 */
function get_expedientes_data($expediente_nids) {
  $db = \Drupal::database();
  $expedientes = [];
  foreach ($expediente_nids as $expediente_nid) {
    $sql = "SELECT title, DATE_FORMAT(field_expediente_fecha_alta_value, '%d-%m-%Y') as fecha_alta FROM node_field_data nfd INNER JOIN node__field_expediente_fecha_alta fa ON nfd.nid = fa.entity_id WHERE nfd.nid = :expediente_nid";
    $data = $db->query($sql, array(':expediente_nid' => $expediente_nid))
      ->fetchAssoc();
    $alias = \Drupal::service('path.alias_manager')
      ->getAliasByPath('/node/' . $expediente_nid);
    $data['link'] = $alias;
    $expedientes[] = $data;
  }
  return $expedientes;
}
