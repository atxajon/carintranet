<?php

/**
 * @file
 * Provides functionality needed for Carbray clients.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;


define('CAPTACION_ARCHIVADA', 184);
define('ESTADO_CAPTACION_DEFECTO', 44); // 'En contacto'.
define('DEPARTAMENTO_TAX', 189); // user__field_departamento referencing taxonomy term 189 (Tax).

/**
 * Implements hook_theme().
 */
function carbray_cliente_theme($existing, $type, $theme, $path) {
  return [
    'cliente_expediente' => [
      'variables' => [
        'expedientes' => NULL,
        'client_name' => NULL,
        'uid' => NULL,
      ],
    ],
    'button_modal' => [
      'variables' => [
        'button_text' => NULL,
        'button_classes' => NULL,
        'unique_id' => NULL,
        'modal_title' => NULL,
        'modal_content' => NULL,
        'has_plus' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_view_mode_alter().
 *
 * @param $view_mode
 * @param EntityInterface $entity
 * @param $context
 */
function carbray_cliente_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  // Change view mode to 'cliente' if the user we are viewing is not a carbray internal admin user.
  if ($entity->getEntityTypeId() == 'user') {
    $path = \Drupal::request()->getpathInfo();
    $arg = explode('/', $path);
    $uid = end($arg);
    if (!is_numeric($uid)) {
      return;
    }
    if ($arg[1] != 'user') {
      return;
    }

    $user = User::load($uid);
    $roles = $user->getRoles();
    // If user with only 1 role and it is authenticated:
    if (in_array('authenticated', $roles) && count($roles) == 1) {
      $view_mode = 'cliente';
    }
  }
}

/**
 * Implements hook_theme_suggestions_user_alter().
 *
 *   An array of alternate, more specific names for template files or theme
 *   functions.
 */
function carbray_cliente_theme_suggestions_user_alter(&$suggestions, $vars, $hook) {

  $mode = $vars['elements']['#view_mode'];

  // Create a user theme hook suggestion based on the field_fase value.
  $suggestions[] = 'user__' . $mode;
}

function get_cliente_nombre($uid) {
  $user = User::load($uid);
  return $user->get('field_nombre')->value . ' ' . $user->get('field_apellido')->value;
}

/**
 * Gets clientes uids where a given worker has them as Captador node's captador OR Expediente node's responsable.
 */
function get_my_clients($worker_uid, $estado = 'captacion') {
  $db = \Drupal::database();

  if ($estado == 'captacion') {
    // Show users with no expedientes created yet as long as their captacion is not on status 'archivada' (tid 184).
    $sql = "SELECT field_captacion_cliente_target_id as uid, cc.entity_id as captacion_nid FROM node__field_captacion_cliente cc INNER JOIN node__field_captacion_estado_captacion e on cc.entity_id = e.entity_id
WHERE cc.entity_id IN (
	SELECT c.entity_id from node__field_captacion_captador c WHERE 	field_captacion_captador_target_id = :uid) 
AND cc.entity_id NOT IN (
	SELECT ec.field_expediente_captacion_target_id FROM node__field_expediente_captacion ec) 
AND field_captacion_estado_captacion_target_id != 184	
ORDER BY uid DESC";
  }
  else {
    // Client (his captacion) has an expediente.
    $sql = "Select field_captacion_cliente_target_id as uid, entity_id as captacion_nid FROM node__field_captacion_cliente cc
	WHERE cc.entity_id IN (SELECT field_expediente_captacion_target_id as captacion_nid FROM node__field_expediente_captacion ec
		WHERE ec.entity_id IN (SELECT entity_id as expediente_nid FROM node__field_expediente_responsable er WHERE er.field_expediente_responsable_target_id = :uid))";
  }

  $clientes_uids = $db->query($sql, array(':uid' => $worker_uid))
    ->fetchAll();
  return $clientes_uids;
}

/**
 * Given a captacion nid finds a propuesta.
 * @param $captacion_nid
 *
 * @return array|int
 */
function get_captacion_propuesta($captacion_nid) {
  $query = \Drupal::entityQuery('node');
  $query->condition('status', 1);
  $query->condition('type', 'propuesta');
  $query->condition('field_propuesta_captacion', $captacion_nid);
  $propuesta_nid = $query->execute();
  return $propuesta_nid;
}

function get_client_estado_captacion($uid) {
  $query = \Drupal::entityQuery('user');
  $query->condition('field_propuesta_cliente', $uid);
  return $query->execute();
}

function print_cliente_link($cliente, $link = TRUE) {
  $user_link = '';
  if ($cliente) {
    // Build column 'Nombre': link to user page with nombre and apellido as text.
    $nombre = $cliente->get('field_nombre')->value;
    $apellido = $cliente->get('field_apellido')->value;
    $nombre_apellido = $nombre . ' ' . $apellido;
    if ($link) {
      $url = Url::fromRoute('entity.user.canonical', array('user' => $cliente->id()));
      $user_link = Link::fromTextAndUrl($nombre_apellido, $url);
    }
    else {
      $user_link = $nombre_apellido;
    }
  }

  return $user_link;
}

function print_captacion_link($captacion_nid, $cliente = '') {
  // Build column 'Nombre': link to user page with nombre and apellido as text.
  if ($cliente) {
    $nombre = $cliente->get('field_nombre')->value;
    $apellido = $cliente->get('field_apellido')->value;
    $nombre_apellido = $nombre . ' ' . $apellido;
    $url = Url::fromRoute('entity.node.canonical', array('node' => $captacion_nid));
    $link = Link::fromTextAndUrl($nombre_apellido, $url);
  }
  else {
    $url = Url::fromRoute('entity.node.canonical', array('node' => $captacion_nid), array('attributes' => array('class' => array('btn', 'btn-primary', 'btn-sm'))));
    $link = Link::fromTextAndUrl('Ver Captacion', $url);
  }

  return $link;
}

function print_cliente_tematica($servicio) {
  $servicio_tid = $servicio['target_id'];
  $tematica = get_parent_of_child_term($servicio_tid);
  $tematica_markup = Markup::create($tematica);
  return $tematica_markup;
}

function print_cliente_contacto($cliente) {
  // Build contacto column.
  $mail = ($cliente->getEmail()) ? $cliente->getEmail() . '<br>' : '';
  $telefono = ($cliente->get('field_telefono')->value) ? $cliente->get('field_telefono')->value . '<br>' : '';
  $contacto = $mail . $telefono;
  $contacto_markup = Markup::create($contacto);
  return $contacto_markup;
}

function print_cliente_captadores_responsables($workers) {
  /**
   * A client can have multiple captadores/responsables assigned;
   **/
  $workers_string = '';
  foreach ($workers as $worker_uid) {
    $worker_uid = $worker_uid['target_id'];
    $user = User::load($worker_uid);
    $worker = $user->get('field_nombre')->value . ' ' . $user->get('field_apellido')->value;
    $workers_string .= $worker . '<br>';
  }
  $worker_markup = Markup::create($workers_string);
  return $worker_markup;
}

function print_cliente_expedientes($expediente_nids) {
  if (!$expediente_nids) {
    return;
  }

  $expediente_link_string = '';
  if (is_array($expediente_nids)) {
    $count_expedientes = 0;
    foreach ($expediente_nids as $expediente_nid) {
      $title = get_node_title($expediente_nid);
      $class = ($count_expedientes == 0) ? ['btn', 'btn-primary', 'btn-sm'] : ['btn', 'btn-primary', 'btn-sm', 'margin-top-10'];
      $expediente_link = Link::fromTextAndUrl($title, Url::fromRoute('entity.node.canonical', ['node' => $expediente_nid], array(
        'attributes' => array(
          'target' => '_blank',
          'class' => $class,
        ),
      )));
      $expediente_link_string .= $expediente_link->toString()
          ->getGeneratedLink() . '<br>';
      $count_expedientes ++;
    }
  }
  else {
    $title = get_node_title($expediente_nids);
    $expediente_link = Link::fromTextAndUrl($title, Url::fromRoute('entity.node.canonical', ['node' => $expediente_nids], array(
      'attributes' => array(
        'target' => '_blank',
        'class' => array('btn', 'btn-primary', 'btn-sm')
      ),
    )));
    $expediente_link_string .= $expediente_link->toString()
        ->getGeneratedLink() . '<br>';
  }

  $expediente_markup = Markup::create($expediente_link_string);
  return $expediente_markup;

}

/**
 * Given a user id return its Captacion nid.
 *
 * @param $uid
 */
function get_cliente_captacion($uid) {
  $db = \Drupal::database();
  $sql = "SELECT nid FROM node_field_data nfd INNER JOIN node__field_captacion_cliente cc ON nfd.nid = cc.entity_id WHERE cc.field_captacion_cliente_target_id = :uid";
  $data = $db->query($sql, array(':uid' => $uid))->fetchAll();
  return $data;
}

/**
 * Given a captacion nid return its User uid.
 *
 * @param $nid
 */
function get_captacion_cliente($nid) {
  $db = \Drupal::database();
  $sql = "SELECT field_captacion_cliente_target_id FROM node__field_captacion_cliente WHERE entity_id = :nid";
  $data = $db->query($sql, array(':nid' => $nid))->fetchAll();
  return $data;
}

/**
 * Given a captacion nid return its captador(es).
 *
 * @param $nid
 */
function get_captacion_captador($nid) {
  $db = \Drupal::database();
  $sql = "SELECT field_captacion_captador_target_id FROM node__field_captacion_captador WHERE entity_id = :nid";
  $data = $db->query($sql, array(':nid' => $nid))->fetchCol();
  return $data;
}

/**
 * Given a expediente nid return its responsable(s).
 *
 * @param $nid
 */
function get_expediente_responsable($nid) {
  $db = \Drupal::database();
  $sql = "SELECT field_expediente_responsable_target_id FROM node__field_expediente_responsable WHERE entity_id = :nid";
  $data = $db->query($sql, array(':nid' => $nid))->fetchCol();
  return $data;
}

/**
 * Given a expediente nid return its modelo(s).
 *
 * @param $nid
 */
function get_expediente_modelos($nid) {
  $db = \Drupal::database();
  $sql = "SELECT modelos_tid, completed FROM carbray_expediente_modelos WHERE expediente_nid = :nid";
  $data = $db->query($sql, array(':nid' => $nid))->fetchAll(PDO::FETCH_ASSOC);
  return $data;
}


/**
 * Get notas referenced against a given nid.
 *
 * @param $id
 *   Int nid/uid of the captacion/expediente/user the note refers to.
 */
function get_notas($id, $bundle) {
  $db = \Drupal::database();

  $sql = "SELECT nn.entity_id FROM node__field_nota_nota nn INNER JOIN";
  if ($bundle == 'captacion') {
    $sql .= ' node__field_captacion_nota cn on nn.entity_id = cn.field_captacion_nota_target_id';
  }
  else if ($bundle == 'expediente') {
    $sql .= ' node__field_expediente_nota cn on nn.entity_id = cn.field_expediente_nota_target_id';
  }
  else if ($bundle == 'user') {
    $sql .= ' user__field_notas cn on nn.entity_id = cn.field_notas_target_id';
  }

  $sql .= " INNER JOIN node_field_data nfd on nn.entity_id = nfd.nid WHERE cn.entity_id = :id ORDER BY created DESC";

  $notas_nids = $db->query($sql, array(':id' => $id))->fetchCol();
  return $notas_nids;
}

function get_facturas($filters = [], $paid = FALSE ) {
  // @todo: standardise into one query that takes parameters.
  $db = \Drupal::database();

  if (isset($filters['captador']) && !isset($filters['departamento'])) {
    // Used captador filter only.
    $sql = 'SELECT DISTINCT fc.entity_id FROM node__field_factura fc
WHERE field_factura_target_id IN (SELECT entity_id FROM node__field_captacion_captador WHERE field_captacion_captador_target_id = :captador_uid) ORDER BY fc.entity_id DESC';
    $result = $db->query($sql, [':captador_uid' => $filters['captador']])->fetchCol();
  }
  elseif (isset($filters['departamento']) && !isset($filters['captador'])) {
    // Used departamento filter only.
    $sql = 'SELECT DISTINCT fc.entity_id FROM node__field_factura fc INNER JOIN node__field_captacion_captador cc ON cc.entity_id = fc.field_factura_target_id
WHERE cc.field_captacion_captador_target_id IN (SELECT DISTINCT entity_id FROM user__field_departamento d  WHERE field_departamento_target_id = :departamento_tid) ORDER BY fc.entity_id DESC';
    $result = $db->query($sql, [':departamento_tid' => $filters['departamento']])->fetchCol();
  }
  elseif(isset($filters['departamento']) && isset($filters['captador'])) {
    // Used both departamento and captador filters.
    $sql = 'SELECT DISTINCT fc.entity_id FROM node__field_factura fc INNER JOIN node__field_captacion_captador cc ON cc.entity_id = fc.field_factura_target_id
WHERE cc.field_captacion_captador_target_id IN (SELECT DISTINCT entity_id FROM user__field_departamento d  WHERE field_departamento_target_id = :departamento_tid)
AND field_factura_target_id IN (SELECT DISTINCT entity_id FROM node__field_captacion_captador WHERE field_captacion_captador_target_id = :captador_uid)
ORDER BY fc.entity_id DESC';
    $result = $db->query($sql, [':departamento_tid' => $filters['departamento'], ':captador_uid' => $filters['captador']])->fetchCol();
  }
  else {
    // Used no filters.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'factura');
    if ($paid) {
      $query->condition('field_factura_pagada.value', 1);
    }
    else {
      $query->condition('field_factura_pagada.value', 0);
    }
    // @todo: sort by most recent first.
    $result = $query->execute();
  }

  return $result;
}

/**
 * Returns all facturas for the clientes of a given captador.
 * @param $captador_uid
 */
function get_facturas_mis_clientes($captador_uid) {
  $db = \Drupal::database();
  $sql = "SELECT entity_id FROM node__field_factura ff
WHERE field_factura_target_id IN (SELECT entity_id FROM node__field_captacion_captador WHERE field_captacion_captador_target_id = :captador_uid) ORDER BY entity_id DESC";
  $my_facturas = $db->query($sql, [':captador_uid' => $captador_uid])->fetchAll();
  return $my_facturas;
}

/**
 * Implements hook_user_delete().
 * @param $account
 */
function carbray_cliente_user_delete($account) {
  $uid_deleted = $account->id();

  /**
   * Delete all content for the user: captaciones, expedientes, actuaciones, expedientes, notas of captacion, notas of expediente...
   */
  $nids_to_delete = [];
  $captaciones_nids = [];
  $expedientes_nids = [];
  $actuaciones_nids = [];
  $captaciones = \Drupal::entityQuery('node')
    ->condition('type', 'captacion')
    ->condition('field_captacion_cliente', $uid_deleted)
    ->execute();
  foreach ($captaciones as $captacion) {
    $nids_to_delete[] = $captacion;
    $captaciones_nids[] = $captacion;
  }

  if ($captaciones_nids) {
    $facturas = \Drupal::entityQuery('node')
      ->condition('type', 'factura')
      ->condition('field_factura', $captaciones_nids, 'IN')
      ->execute();
    foreach ($facturas as $factura) {
      $nids_to_delete[] = $factura;
    }

    $expedientes = \Drupal::entityQuery('node')
      ->condition('type', 'expediente')
      ->condition('field_expediente_captacion', $captaciones_nids, 'IN')
      ->execute();
    foreach ($expedientes as $expediente) {
      $nids_to_delete[] = $expediente;
      $expedientes_nids[] = $expediente;
    }

    $notas_captacion = \Drupal::entityQuery('node')
      ->condition('type', 'nota')
      ->condition('field_captacion_nota', $captaciones_nids, 'IN')
      ->execute();
    foreach ($notas_captacion as $nota_captacion) {
      $nids_to_delete[] = $nota_captacion;
    }
  }


  if ($expedientes_nids) {
    $notas_expediente = \Drupal::entityQuery('node')
      ->condition('type', 'nota')
      ->condition('field_expediente_nota', $expedientes_nids, 'IN')
      ->execute();
    foreach ($notas_expediente as $nota_expediente) {
      $nids_to_delete[] = $nota_expediente;
    }

    $actuaciones = \Drupal::entityQuery('node')
      ->condition('type', 'actuacion')
      ->condition('field_actuacion_expediente', $expedientes_nids, 'IN')
      ->execute();
    foreach ($actuaciones as $actuacion) {
      $nids_to_delete[] = $actuacion;
      $actuaciones_nids[] = $actuacion;
    }
  }

  if ($actuaciones_nids) {
    $notas_actuacion = \Drupal::entityQuery('node')
      ->condition('type', 'nota')
      ->condition('field_actuacion_nota', $actuaciones_nids, 'IN')
      ->execute();
    foreach ($notas_actuacion as $nota_actuacion) {
      $nids_to_delete[] = $nota_actuacion;
    }
  }

  // Delete also carbray_cliente_captacion_expediente table content.
  $query = \Drupal::database()->delete('carbray_user_captacion_expediente');
  $query->condition('uid', $account->id());
  $query->execute();

  if (!empty($nids_to_delete)) {
    foreach ($nids_to_delete as $nid) {
      $node = Node::load($nid);
      $node->delete();
      \Drupal::logger('carbray_cliente')->notice('Deleted node: ' . $nid . ' as content that belonged to uid:  ' . $account->id() . ' got deleted ');
    }
  }
}

/**
 * Gets actuacion-es for a passed in Expediente nid / or actuacion_captacion-es for a passed in Captacion nid.
 *
 * @param $nid
 *   Int node id of the entity we are finding actuaciones for.
 * @param $node_type
 *   String, either 'expediente' or 'captacion'.
 * @return array|int
 */
function get_actuaciones_for_node_csv($nid, $node_type) {
  $field_name = ($node_type == 'expediente') ? 'field_actuacion_expediente' : 'field_actuacion_captacion';
  $bundle = ($node_type == 'expediente') ? 'actuacion' : 'actuacion_captacion';
  $query = \Drupal::entityQuery('node');
  $query->condition('status', 1);
  $query->condition('type', $bundle);
  $query->condition($field_name, $nid);
  $actuaciones_nids = $query->execute();
  return $actuaciones_nids;
}

/**
 * @param $captacion_nid
 *   Int captacion node id.
 */
function get_captacion_captadores($captacion_nid) {
  $db = \Drupal::database();
  $sql = "SELECT field_captacion_captador_target_id FROM node__field_captacion_captador WHERE entity_id = :entity_id";
  return $db->query($sql, array(':entity_id' => $captacion_nid))
    ->fetchCol();
}