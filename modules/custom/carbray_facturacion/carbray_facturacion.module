<?php
use Drupal\user\Entity\User;
use Drupal\Core\Render\Markup;


/**
 * Implements hook_ENTITY_TYPE_insert.
 */
function carbray_facturacion_factura_insert(Drupal\Core\Entity\EntityInterface $entity) {
  // Replace the title of a factura with the obtained node title from new factura form submit
  // followed by the count increment of last factura in the system.
  // Why again? this was done on form alter for submitted new facturas dynamic title assignmenet...
  // We still do it again to prevent race conditions: if a form is stall for a period of time before submit,
  // and another user submits another one in the meantime, count of last added factura in the system
  // will be different.
  // Doing this again prevents that from happening.
  $last_factura_title = get_last_factura();
  $last_factura_number = (int) filter_var($last_factura_title, FILTER_SANITIZE_NUMBER_INT);
  $new_factura_number = (int)$last_factura_number + 1;
  $factura_title = $entity->title->value;
  $factura_cliente_name = preg_replace("/[0-9,]/", "", $factura_title);
  $entity->title = $factura_cliente_name . ' ' . $new_factura_number;
}

/**
 * Returns all facturas for the clientes of a given captador.
 * @param $captador_uid
 */
function get_facturas_mis_clientes($captador_uid) {
  $db = \Drupal::database();
  $sql = "SELECT entity_id FROM node__field_factura ff
WHERE field_factura_target_id IN (SELECT entity_id FROM node__field_captacion_captador WHERE field_captacion_captador_target_id = :captador_uid) ORDER BY entity_id DESC";
  $my_facturas = $db->query($sql, [':captador_uid' => $captador_uid])->fetchAll();
  return $my_facturas;
}


/**
 * Gets facturas pagadas for a given captador or responsable.
 *
 * @param $owner_uid
 *    Int referring to captador of a factura OR responsable of expediente of factura.
 * @return mixed
 */
function get_facturas_pagadas_mis_clientes($owner_uid) {
  $db = \Drupal::database();
  $sql = "SELECT nid, title FROM node__field_factura ff LEFT JOIN node__field_factura_pagada fp on fp.entity_id = ff.entity_id INNER JOIN node_field_data nfd on nfd.nid = ff.entity_id
WHERE field_factura_target_id IN (SELECT entity_id FROM node__field_captacion_captador WHERE field_captacion_captador_target_id = :owner_uid)
UNION
SELECT nid, title 
FROM node__field_factura ff 
LEFT JOIN node__field_factura_pagada fp on fp.entity_id = ff.entity_id 
INNER JOIN node_field_data nfd on nfd.nid = ff.entity_id
INNER JOIN node__field_expediente_captacion ec on ec.field_expediente_captacion_target_id = ff.field_factura_target_id
WHERE ec.entity_id IN (SELECT entity_id FROM node__field_expediente_responsable WHERE field_expediente_responsable_target_id = :owner_uid) 
ORDER BY nid DESC";
  $my_paid_facturas = $db->query($sql, [':owner_uid' => $owner_uid])->fetchAllKeyed();
  return $my_paid_facturas;
}

function get_captacion_for_factura($factura_nid) {
  $db = \Drupal::database();
  $sql = "SELECT field_factura_target_id FROM node__field_factura ff WHERE entity_id = :factura_nid";
  $captacion_nid = $db->query($sql, [':factura_nid' => $factura_nid])->fetchField();
  return $captacion_nid;
}

/**
 * Gets facturas for captacaciones I am captador AND expedientes I am responsible that have a comision entered in {carbray_facturas_registro}.
 * @param $factura_author_uid
 * @return mixed
 */
function get_my_facturas_registradas($factura_author_uid, $dates = []) {
  // If no dates passed in default to current ongoing month dates.
  if (!$dates) {
    $first_day_of_month = date('F jS Y h:i:s A', strtotime('first day of ' . date('Y-m-01' )));
    $first_day_of_month_time = strtotime($first_day_of_month. " UTC");
  }
  else {

  }

  $db = \Drupal::database();
  $params = [];
  $sql = "SELECT  cfr.id as registro_id, nid, cfr.captacion_nid, cfr.factura_nid, cfr.expediente_nid, title, field_captacion_captador_target_id, field_factura_precio_value, comision, created as factura_created, descripcion, field_factura_fecha_cobro_value as fecha_cobro 
FROM carbray_facturas_registro cfr
INNER JOIN node__field_factura ff on cfr.factura_nid = ff.entity_id
INNER JOIN node_field_data nfd on nfd.nid = ff.entity_id 
INNER JOIN node__field_captacion_captador cc on cc.entity_id = ff.field_factura_target_id
INNER JOIN node__field_captacion_cliente capt_cli on capt_cli.entity_id = cc.entity_id
INNER JOIN node__field_factura_precio precio on precio.entity_id = ff.entity_id
LEFT JOIN node__field_factura_fecha_cobro fc on nfd.nid = fc.entity_id
WHERE field_factura_target_id IN (SELECT entity_id FROM node__field_captacion_captador WHERE field_captacion_captador_target_id = :author_uid)  
AND comision IS NOT NULL";


  if ($dates) {
    $sql .= " AND created BETWEEN :date_from AND :date_to";
    $params = [':author_uid' => $factura_author_uid, ':date_from' => $dates['date_from'], ':date_to' => $dates['date_to']];
  }
  else {
    $sql .= " AND created > :date_from";
    $params = [':author_uid' => $factura_author_uid, ':date_from' => $first_day_of_month_time];
  }


  $sql .= " UNION
SELECT  cfr.id as registro_id, nid, cfr.captacion_nid, cfr.factura_nid, cfr.expediente_nid, title, field_captacion_captador_target_id, field_factura_precio_value, comision, created as factura_created, descripcion, field_factura_fecha_cobro_value as fecha_cobro
FROM carbray_facturas_registro cfr
INNER JOIN node__field_factura ff on cfr.factura_nid = ff.entity_id
INNER JOIN node_field_data nfd on nfd.nid = ff.entity_id
INNER JOIN node__field_captacion_captador cc on cc.entity_id = ff.field_factura_target_id
INNER JOIN node__field_factura_precio precio on precio.entity_id = ff.entity_id
LEFT JOIN node__field_factura_pagada fp on fp.entity_id = ff.entity_id 
LEFT JOIN node__field_factura_fecha_cobro fc on nfd.nid = fc.entity_id
INNER JOIN node__field_expediente_captacion ec on ec.field_expediente_captacion_target_id = ff.field_factura_target_id
WHERE ec.entity_id IN (SELECT entity_id FROM node__field_expediente_responsable WHERE field_expediente_responsable_target_id = :author_uid) 
AND comision IS NOT NULL";

  if ($dates) {
    $sql .= " AND created BETWEEN :date_from AND :date_to";
  }
  else {
    $sql .= " AND created > :date_from";
  }

  $sql .= " ORDER BY nid ASC";

  $captacion_nid = $db->query($sql, $params)->fetchAll();
  return $captacion_nid;
}

function get_my_departamento_facturas_registradas($departamento_tid) {
  $db = \Drupal::database();
  $sql = "SELECT cfr.id as registro_id, nid, cfr.captacion_nid, cfr.factura_nid, cfr.expediente_nid, title, field_captacion_captador_target_id, field_factura_precio_value, comision, created as factura_created, descripcion, field_factura_fecha_cobro_value as fecha_cobro 
FROM carbray_facturas_registro cfr
INNER JOIN node__field_factura ff on cfr.factura_nid = ff.entity_id
INNER JOIN node_field_data nfd on nfd.nid = ff.entity_id 
INNER JOIN node__field_captacion_captador cc on cc.entity_id = ff.field_factura_target_id
INNER JOIN node__field_captacion_cliente capt_cli on capt_cli.entity_id = cc.entity_id
INNER JOIN node__field_factura_precio precio on precio.entity_id = ff.entity_id
LEFT JOIN node__field_factura_fecha_cobro fc on nfd.nid = fc.entity_id 
INNER JOIN user__field_departamento fd on fd.entity_id = cc.field_captacion_captador_target_id
WHERE field_departamento_target_id = :dept_tid
AND comision IS NOT NULL
ORDER BY nid DESC";
  $facturas_data = $db->query($sql, [':dept_tid' => $departamento_tid])->fetchAll();
  return $facturas_data;
}

/**
 * For a carbray admin, gets all facturas that have a comision entered in {carbray_facturas_registro}.
 * @return mixed
 */
function get_all_facturas_registradas() {
  $db = \Drupal::database();
  $sql = "SELECT  cfr.id as registro_id, nid, cfr.captacion_nid, cfr.factura_nid, cfr.expediente_nid, title, field_captacion_captador_target_id, field_factura_precio_value, comision, created as factura_created, descripcion, field_factura_fecha_cobro_value as fecha_cobro 
FROM carbray_facturas_registro cfr
INNER JOIN node__field_factura ff on cfr.factura_nid = ff.entity_id
INNER JOIN node_field_data nfd on nfd.nid = ff.entity_id 
INNER JOIN node__field_captacion_captador cc on cc.entity_id = ff.field_factura_target_id
INNER JOIN node__field_captacion_cliente capt_cli on capt_cli.entity_id = cc.entity_id
INNER JOIN node__field_factura_precio precio on precio.entity_id = ff.entity_id
LEFT JOIN node__field_factura_fecha_cobro fc on nfd.nid = fc.entity_id 
WHERE comision IS NOT NULL
ORDER BY nid ASC";
  $facturas_data = $db->query($sql)->fetchAll();
  return $facturas_data;
}


/**
 * Get last factura node title from the system (e.g Thomas Jones 038)
 *
 * @return mixed
 */
function get_last_factura() {
  $db = \Drupal::database();
  $sql = "SELECT title FROM node_field_data WHERE type = 'factura' ORDER BY nid DESC LIMIT 0,1";
  $factura_number = $db->query($sql)->fetchField();
  return $factura_number;
}


function get_excel_table($is_csv = FALSE) {
  // Obtain query string parameters to pass them in to the queries.
  $path = parse_url(\Drupal::request()->getRequestUri());
  $query_array = array();
  if (isset($path['query'])) {
    parse_str($path['query'], $query_array);
  }

  if (!$is_csv) {
    $build['pre'] = [
      '#markup' => '<div class="admin-block">',
    ];
    $new_registro_form = \Drupal::formBuilder()
      ->getForm('Drupal\carbray_facturacion\Form\NewRegistroForm');
    $build['new_registro'] = [
      '#theme' => 'button_modal',
      '#unique_id' => 'anadir-nuevo-registro',
      '#button_text' => 'Nuevo Registro',
      '#button_classes' => 'btn btn-primary margin-bottom-35 margin-top-10 nuevo-registro',
      '#modal_title' => t('Nuevo registro'),
      '#modal_content' => $new_registro_form,
      '#has_plus' => TRUE,
    ];

    $filters_form = \Drupal::formBuilder()
      ->getForm('Drupal\carbray_facturacion\Form\FacturacionFechasFilters');
    $build['filters'] = [
      '#markup' => render($filters_form),
    ];

    $header = [
      ['data' => 'Fecha fact.', 'field' => 'fecha_factura'],
      ['data' => 'Nº fact.', 'field' => 'numero_factura'],
      ['data' => 'Abogado', 'field' => 'captador'],
      [
        'data' => 'Imp. Fact. (B.I.)',
        'field' => 'importe_factura',
        'class' => ['text-right']
      ],
      [
        'data' => '% Base Imponible',
        'field' => 'perc_imponible',
        'class' => ['text-center']
      ],
      [
        'data' => 'Total reparto comision',
        'field' => 'total_reparto_comision',
        'class' => ['text-right']
      ],
      [
        'data' => '% Comisión',
        'field' => 'porcentaje_comision',
        'class' => ['text-center']
      ],
      ['data' => 'Comision', 'field' => 'comision', 'class' => ['text-right']],
      ['data' => 'Fecha cobro', 'field' => 'fecha_cobro'],
      [
        'data' => 'Comentarios',
        'field' => 'comentarios',
        'class' => ['comentarios-col']
      ],
      ['data' => 'Editar', 'field' => 'editar'],
    ];

//    $header = array(
//      'Fecha fact.',
//      'Nº fact.',
//      'Abogado',
//      'Imp. Fact. (B.I.)',
//      '% Base Imponible',
//      'Total reparto comision',
//      '% Comisión',
//      'Comision',
//      'Comentarios',
//      'Editar',
//    );


  }
  // Determine whether this is carbray_facturacion.excel_facturacion or facturacion conjunta.
  $is_admin = FALSE;
  $route_name = \Drupal::routeMatch()->getRouteName();
  $is_facturacion_conjunta_page = ($route_name == 'carbray_facturacion.excel_facturacion') ? FALSE : TRUE;
  if ($is_facturacion_conjunta_page) {
    // At route facturacion conjunta (por departamento) a worker sees all department facturas.
    $user = User::load(\Drupal::currentUser()->id());
    $user_departamento = $user->get('field_departamento')->getValue();
    $departamento_tid = 0;
    if ($user_departamento) {
      foreach ($user_departamento as $departamento) {
        $departamento_tid = $departamento['target_id'];
      }
    }
    if (!$departamento_tid) {
      return ['#markup' => t('Usuario sin departamento asignado aun!')];
    }
    $facturas_registradas = get_my_departamento_facturas_registradas($departamento_tid);
  }
  else {
    // At route facturacion individual we have diff options;
    // A user of role Carbray admin sees all facturas; all other role types see only their facturas.
    $current_user = \Drupal::currentUser();
    $current_user_roles = $current_user->getRoles();
    if (in_array('worker', $current_user_roles)) {
      $facturas_registradas = get_my_facturas_registradas(\Drupal::currentUser()
        ->id(), $query_array);
    }
    elseif (in_array('jefe_departamento', $current_user_roles)) {
      $facturas_registradas = get_my_facturas_registradas(\Drupal::currentUser()
        ->id(), $query_array);
    }
    elseif (in_array('carbray_administrator', $current_user_roles)) {
      $facturas_registradas = get_all_facturas_registradas();
      $is_admin = TRUE;
    }
    elseif (in_array('administrator', $current_user_roles)) {
      $facturas_registradas = get_all_facturas_registradas();
      $is_admin = TRUE;
    }
  }

  $acumulated_total_facturas = 0;
  $acumulated_total_reparto_comision = 0;
  $acumulated_total_comision = 0;
  $last_nid = 0;
  $rows = [];
  if ($facturas_registradas) {
    foreach ($facturas_registradas as $factura_registrada) {
      // Skip duplicates for facturas that have multiple captadores.
      if ($last_nid == $factura_registrada->nid) {
        continue;
      }
      $mi_comision = $factura_registrada->field_factura_precio_value * $factura_registrada->comision;
      $perc_comision = 0.05;
      $total_reparto_comision = $mi_comision * $perc_comision;

      // Workers can edit their factura registros, carbray_admin can't.
      if (!$is_admin) {
        $form = \Drupal::formBuilder()
          ->getForm('Drupal\carbray_facturacion\Form\EditRegistroForm', $factura_registrada->registro_id, $factura_registrada->factura_nid, $factura_registrada->captacion_nid);
        $edit_button = [
          '#theme' => 'button_modal',
          '#unique_id' => 'add-hours-expediente-nid-' . 6068,
          '#button_text' => 'Editar registro',
          '#button_classes' => 'btn btn-primary btn-sm',
          '#modal_title' => t('Editar registro'),
          '#modal_content' => $form,
          '#has_plus' => FALSE,
        ];
      }

      $captador_user = User::load($factura_registrada->field_captacion_captador_target_id);
      $captador_name = $captador_user->get('field_nombre')->value . ' ' . $captador_user->get('field_apellido')->value;

      $rows[] = [
        'data' => [
          date('d/m/y', $factura_registrada->factura_created),
          $factura_registrada->title,
          $captador_name,
          [
            'data' => number_format($factura_registrada->field_factura_precio_value, 2, ',', '.') . '€',
            'class' => ['text-right'],
          ],
          [
            'data' => $factura_registrada->comision * 100 . '%',
            'class' => ['text-center'],
          ],
          [
            'data' => number_format($mi_comision, 2, ',', '.') . '€',
            'class' => ['text-right'],
          ],
          [
            'data' => $perc_comision * 100 . '%',
            'class' => ['text-center'],
          ],
          [
            'data' => number_format($total_reparto_comision, 2, ',', '.') . '€',
            'class' => ['text-right'],
          ],
          ($factura_registrada->fecha_cobro) ? date('d/m/y', $factura_registrada->fecha_cobro) : '',
          Markup::create($factura_registrada->descripcion),
          (!$is_admin) ? render($edit_button) : '',
        ],
        'class' => [
          'row_class',
        ],
      ];

      $rows_csv[] = [
        date('d/m/y', $factura_registrada->factura_created),
        $factura_registrada->title,
        $captador_name,
        number_format($factura_registrada->field_factura_precio_value, 2, ',', '.') . '€',
        $factura_registrada->comision * 100 . '%',
        number_format($mi_comision, 2, ',', '.') . '€',
        $perc_comision * 100 . '%',
        number_format($total_reparto_comision, 2, ',', '.') . '€',
        ($factura_registrada->fecha_cobro) ? date('d-m-Y', $factura_registrada->fecha_cobro) : '',
        strip_tags($factura_registrada->descripcion),
      ];

      $acumulated_total_facturas += $factura_registrada->field_factura_precio_value;
      $acumulated_total_reparto_comision += $total_reparto_comision;
      $acumulated_total_comision += $mi_comision;
      $last_nid = $factura_registrada->nid;
    }
    // Adds totals row.
    $footer_row[] = [
      Markup::create('<b>Total:</b>'),
      '',
      '',
      [
        'data' => Markup::create('<b>' . number_format($acumulated_total_facturas, 2, ',', '.') . '€</b>'),
        'class' => ['text-right'],
      ],
      '',
      [
        'data' => Markup::create('<b>' . number_format($acumulated_total_comision, 2, ',', '.') . '€</b>'),

        'class' => ['text-right'],
      ],
      '',
      [
        'data' => Markup::create('<b>' . number_format($acumulated_total_reparto_comision, 2, ',', '.') . '€</b>'),


        'class' => ['text-right'],
      ],
      '',
      '',
      '',
    ];
    $rows_csv[] = [
      'Total:',
      '',
      '',
      number_format($acumulated_total_facturas, 2, ',', '.') . '€',
      '',
      number_format($acumulated_total_comision, 2, ',', '.') . '€',
      '',
      number_format($acumulated_total_reparto_comision, 2, ',', '.') . '€',
      '',
      '',
    ];
  }

  if ($is_csv) {
    $header_csv[] = array(
      'Fecha factura:',
      'Numero factura',
      'Captador',
      'Importe factura (B.I.)',
      'Porcentaje base imponible',
      'Total reparto comision',
      'Porcentaje comision',
      'Comision',
      'Fecha cobro factura',
      'Comentarios',
    );
    return array_merge($header_csv, $rows_csv);
  }

  $build['csv_link'] = [
    '#markup' => get_csv_link('carbray_facturacion.excel_csv', []),
  ];

  $build['#attached']['library'][] = 'carbray/tablesorter';
  $build['#attached']['library'][] = 'carbray/carbray_table_sorter';

  $build['tabla_excel_facturacion'] = [
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty_option' => 'No hay facturas.',
    '#attributes' => [
      'class' => ['tabla-excel', 'tablesorter'],
    ],
    '#cache' => [
      'max-age' => 0,
    ],
  ];
  if (isset($footer_row)) {
    $build['tabla_excel_facturacion']['#footer'] = $footer_row;
  }

  $build['post'] = [
    '#markup' => '</div>',
  ];

  return $build;
}