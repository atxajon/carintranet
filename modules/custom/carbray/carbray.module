<?php

/**
 * @file
 * General functionality utilities for Carbray.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\user\Entity\User;
use Drupal\carbray\ProgressBar;


/**
 * Implements hook_theme().
 */
function carbray_theme($existing, $type, $theme, $path) {
  return [
    'carbray_progress_bar' => [
      'variables' => [
        'message' => NULL,
        'animate' => NULL,
        'large' => FALSE,
        'objetivo_cifra' => NULL,
        'facturado' => NULL,
        'percent' => NULL,
        'label' => NULL
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function carbray_form_alter(&$form, FormStateInterface $form_state) {
  // @todo: hide display name field from user edit form.
  switch ($form['#id']) {
    case 'views-exposed-form-clientes-por-fase-page-1':
      break;

    case 'user-form':
      // If editing an internal user/carbray admin, unset non relevant fields.
      $is_internal_user = FALSE;
      $is_user_resetting_pwd = FALSE;
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      $form_owner_uid = 0;
      foreach ($path_args as $path_arg) {
        if (is_numeric($path_arg)) {
          $form_owner_uid = $path_arg;
        }
      }
      $form_owner_user = User::load($form_owner_uid);
      $form_owner_roles = $form_owner_user->getRoles();
      if (in_array('worker', $form_owner_roles) || in_array('carbray_administrator', $form_owner_roles)) {
        $is_internal_user = TRUE;
      }

      // An internal user must not see/populate clients related fields. A user resetting pwd does must not see anything else than password reset box.
      $pass_token = \Drupal::request()->query->get('pass-reset-token');
      if ($pass_token) {
        $is_user_resetting_pwd = TRUE;
      }
      if ($is_internal_user || $is_user_resetting_pwd) {
        $form = _hide_user_form_fields($form, $is_user_resetting_pwd);
      }

      // A user of role Worker (uid 16) can't edit another user Worker/Carbray admin by guessing url (user/18/edit).
      $current_user = \Drupal::currentUser();
      $current_user_roles = $current_user->getRoles();
      // @todo: can carbray admins edit Workers? if they cant, add to following line extra OR test for carbray_administrator.
      if (in_array('worker', $current_user_roles)) {
        if ($form_owner_uid != $current_user->id()) {
          if (in_array('carbray_administrator', $form_owner_roles) || in_array('worker', $form_owner_roles)) {
            throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
          }
        }
      }

      break;
    case 'node-objetivos-form':
    case 'node-objetivos-edit-form':
      // Hide Objetivo title field.
      $form['title']['#access'] = FALSE;
      // Add custom validate handler.
      $form['#validate'][] = 'either_trabajador_or_departamento';
      // @todo add another handler to deal with already existing in current timeframe objetivos for this entity.
      break;
  }
}

/**
 * Custom validate handler to ensure only trabajador or departamento are filled in by admin BUT NOT BOTH.
 */
function either_trabajador_or_departamento(array &$form, FormStateInterface $form_state) {
  $trabajador_uid = $form_state->getValue('field_objetivo_trabajador');
  $trabajador_uid = $trabajador_uid[0]['target_id'];

  $departamento_tid = $form_state->getValue('field_objetivo_departamento');
  $departamento_tid = $departamento_tid[0]['target_id'];

  // User filled in both departamento and trabajador fields: throw error.
  if ($trabajador_uid && $departamento_tid) {
    $form_state->setErrorByName('field_objetivo_trabajador', t('Has rellenado el objetivo para un trabajador y departamento al mismo tiempo; un objetivo solo puede ser para uno u otro, rellena un campo y otro pero no ambos.'));
  }
}

/**
 * Implements hook_node_presave().
 */
function carbray_node_presave(Drupal\Core\Entity\EntityInterface $node) {
  switch ($node->getType()) {
    case 'objetivos':
      /**
       * Dynamically populate objetivo title based on entered node fields.
       */
      $trabajador_uid = $node->get('field_objetivo_trabajador')->getValue();
      $trabajador_uid = ($trabajador_uid) ? $trabajador_uid[0]['target_id'] : $trabajador_uid;

      $departamento_tid = $node->get('field_objetivo_departamento')
        ->getValue();
      $departamento_tid = ($departamento_tid) ? $departamento_tid[0]['target_id'] : $departamento_tid;

      $fecha_inicio = $node->get('field_objetivo_fecha_inicio')->value;
      $f1 = strtotime($fecha_inicio);
      $format = "d-M-Y";
      $formatted_fecha_inicio = date($format, $f1);

      $fecha_final = $node->get('field_objetivo_fecha_final')->value;
      $f2 = strtotime($fecha_final);
      $formatted_fecha_final = date($format, $f2);

      $collected_title = '';
      if ($trabajador_uid) {
        $account = User::load($trabajador_uid);
        $nombre = $account->get('field_nombre')->value;
        $apellido = $account->get('field_apellido')->value;
        $collected_title .= $nombre . ' ' . $apellido;
      }
      if ($departamento_tid) {
        $term = Term::load($departamento_tid);
        $departamento_nombre = $term->get('name')->value;
        $collected_title .= $departamento_nombre;
      }

      $collected_title .= ' de ' . $formatted_fecha_inicio . ' a ' . $formatted_fecha_final;

      $node->title = $collected_title;
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function carbray_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['#prefix'] = t('<h2>Log in to Carbray</h2>');
  // Adds placeholder text to login form inputs.
  $form['name']['#attributes']['placeholder'] = t('Email address');
  $form['pass']['#attributes']['placeholder'] = t('Password');

  // Adds a 'forgot your password' link to the form.
  $url = Url::fromRoute('user.pass');
  $new_pwd_link = Link::fromTextAndUrl(t('Forgot your password?'), $url);
  $form['actions']['submit']['#field_suffix'] = $new_pwd_link;

  // Add our custom handler to redirect after login.
  // @todo: not only redirect on login! redirect also when accesing front path and user is authenticated, otherwise the form keeps showing! user should be taken to their landing path!
  $form['#submit'][] = '_carbray_user_login_redirecter';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function carbray_form_user_pass_alter(&$form, FormStateInterface $form_state) {
  $form['#prefix'] = t('<h2>Request new password</h2>');
  $form['actions']['submit']['#value'] = t('Send instructions by email');
  $form['actions']['submit']['#attributes'] = array('class' => array('btn-primary'));
}

/**
 * Handles hiding fields on user form.
 * @param $form
 * @param bool $is_user_reset
 * @return mixed
 */
function _hide_user_form_fields($form, $is_user_reset = FALSE) {
  unset($form['field_fase']);
  unset($form['field_captador']);
  unset($form['field_responsable']);
  unset($form['field_fecha_alta']);
  unset($form['field_identificacion']);
  unset($form['field_notas']);
  unset($form['field_email']);
  unset($form['field_user_estado_de_captacion']);
  return $form;
}
/**
 * Form submission handler for user_login_form().
 *
 * Redirects the user based on role to various dashboards after logging in.
 */
function _carbray_user_login_redirecter(&$form, FormStateInterface $form_state) {
  $url = _carbray_redirecter();
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the password field when admin is creating an account.
 */
function carbray_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['administer_users']['#value']) {
    // Set default status value to blocked user.
    // @todo: need a quick and easy way to allow admin to activate users and trigger an email to invite them to setup their password.
    // @todo: need to disable most of user fields for end user, not to allow them to change field values (other than password through front end, etc.)
    $form['account']['status']['#default_value'] = 0;

    $form['account']['pass']['#access'] = FALSE;
    $form['account']['pass']['#value']['pass1'] = user_password();
    $form['account']['pass']['#value']['pass2'] = $form['account']['pass']['#value']['pass1'];
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Adds the carbray.global-styles library to the page to solve admin theme styling
 * without having to resort to create a custom subtheme.
 *
 * @param array $attachments
 */
function carbray_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'carbray/carbray.global-styles';
}

/**
 * Implements template_preprocess_page().
 *
 * @param $variables
 */
function carbray_preprocess_page(&$variables) {

  // Redirect logged in user accessing front page.
  if ($variables['is_front'] && $variables['logged_in']) {
    $url = _carbray_redirecter();
    $response = new RedirectResponse($url, 302);
    $response->send();
  }
}

function _carbray_redirecter() {
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  // If user with only 1 role and it is authenticated:
  if (in_array('authenticated', $roles) && count($roles) == 1) {

  }
  elseif (in_array('worker', $roles)) {
    $url = Url::fromUri('entity:node/2');
  }
  elseif (in_array('carbray_administrator', $roles)) {
    $url = Url::fromUri('entity:node/3');
  }
  else {
    $url = Url::fromUri('entity:node/3');
  }
  return $url;
}

/**
 * Implements hook_entity_view_alter().
 */
function carbray_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Entities not meant to be accessed/viewable on front end.
  $entities_to_redirect = array(
//    'objetivos',
    'factura',
  );
  if (in_array($entity->bundle(), $entities_to_redirect)) {
    // @todo: tidy up this, is it needed??
    $url = Url::fromRoute('views_ui.add', [], ['absolute' => TRUE]);
    drupal_set_message(t('You have been redirected because...'), 'status', TRUE);
//    $response = new RedirectResponse($url->getRouteName());
    $response = new RedirectResponse('/worker');
    $response->send();
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 * @param $data
 * @param $route_name
 */
function carbray_menu_local_tasks_alter(&$data, $route_name) {
  // Users with worker role must not see 'view / edit' local task tabs when browsing other worker and carbray admin users at e.g /user/13.
  $routes = ['entity.user.canonical'];
  if (in_array($route_name, $routes)) {
    // Get logged in user's role.
    $current_user = \Drupal::currentUser();
    $current_user_uid = $current_user->id();
    $roles = $current_user->getRoles();
    if (in_array('worker', $roles)) {
      // Get user uid from url arg.
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      $uid = 0;
      foreach ($path_args as $path_arg) {
        if (is_numeric($path_arg)) {
          $uid = $path_arg;
        }
      }
      // If currently logged in worker's uid and url's %uid do not match unset tabs.
      if ($uid != $current_user_uid) {
        foreach ($data['tabs'][0] as $key => $value) {
          unset($data['tabs'][0][$key]);
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_node().
 *
 * @param $variables
 */
function carbray_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $nid = $node->id();
  // Landing pages for Carbray workers/administrators add ProgressBar element.
  if ($nid == '2' || $nid == '3') {

    $logged_in_worker_uid = \Drupal::currentUser()->id();

    $progress = new ProgressBar('user');
    $progress->getTrabajadorObjetivo($logged_in_worker_uid);
    if (!$progress->cifra) {
      $variables['objetivo'] = t('Este trabajador no tiene objetivo actual creado todavia.');
    }
    else {
      // @todo: remove hardcoded!
      $total_facturas = 3000.12;
      $total_facturas = (float)$total_facturas;
      $percent = $total_facturas / $progress->cifra * 100;
      // Don't let percent exceed 100% when objetivo is achieved.
      $percent = ($percent > 100) ? 100 : $percent;

      $build = array(
        '#theme' => 'carbray_progress_bar',
        '#animate' => FALSE,
        '#large' => TRUE,
        '#percent' => $percent,
        '#objetivo_cifra' => $progress->cifra,
        '#facturado' => $total_facturas,
      );

      $fi = strtotime($progress->fecha_inicio);
      $format = "d-M-Y";
      $formatted_fecha_inicio = date($format, $fi);

      $ff = strtotime($progress->fecha_final);
      $formatted_fecha_final = date($format, $ff);

      $variables['titulo_objetivo'] = 'Objetivo de ' . $formatted_fecha_inicio . ' a ' . $formatted_fecha_final;
      $variables['objetivo'] = $build;

    }

  }
}