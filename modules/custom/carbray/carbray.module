<?php

/**
 * @file
 * General functionality utilities for Carbray.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\carbray\ProgressBar;
use Drupal\Core\Render\Markup;


define('CAPTACION_ARCHIVADA', 184);
define('ESTADO_CAPTACION_DEFECTO', 44); // 'En contacto'.
define('DEPARTAMENTO_CORPORATE', 185);
define('DEPARTAMENTO_FRANCES', 186);
define('DEPARTAMENTO_INMIGRATION', 187);
define('DEPARTAMENTO_LITIGATION', 188);
define('DEPARTAMENTO_TAX', 189);
define('DEPARTAMENTO_REALESTATE', 209);

/**
 * Implements hook_theme().
 */
function carbray_theme($existing, $type, $theme, $path) {
  return [
    'carbray_progress_bar' => [
      'variables' => [
        'message' => NULL,
        'animate' => NULL,
        'large' => FALSE,
        'objetivo_cifra' => NULL,
        'facturado' => NULL,
        'percent' => NULL,
        'label' => NULL
      ],
    ],
  ];
}


/**
 * Implements hook_form_BASE_FORM_ID_alter.
 * @param $form
 * @param $form_state
 * @param $form_id
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function carbray_form_node_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#form_id'] == 'node_factura_form') {
    $form['#attributes']['class'][] = 'block';
    $form['#attached']['library'][] = 'carbray_facturacion/factura_calculator';

    // Get captacion nid from url arg.
    $captacion_nid = \Drupal::request()->query->get('captacion_nid');
    $captacion_node = Node::load($captacion_nid);
    $captacion_uid = $captacion_node->get('field_captacion_cliente')
      ->getValue();
    $cliente_data = \Drupal::entityTypeManager()
      ->getStorage('user')
      ->load($captacion_uid[0]['target_id']);

    $form['cliente'] = array(
      '#type' => 'textfield',
      '#title' => 'Cliente',
      '#default_value' => $cliente_data->get('field_nombre')->value . ' ' . $cliente_data->get('field_apellido')->value,
      '#disabled' => TRUE,
      '#prefix' => '<div class="clearfix">',
    );
    $form['email'] = array(
      '#type' => 'textfield',
      '#title' => 'Email',
      '#default_value' => $cliente_data->getEmail(),
      '#disabled' => TRUE,
    );
    $form['telefono'] = array(
      '#type' => 'textfield',
      '#title' => 'Telefono',
      '#default_value' => $cliente_data->get('field_telefono')->value,
      '#disabled' => TRUE,
      '#suffix' => '</div>',
    );

    $form['captacion_nid'] = array(
      '#type' => 'hidden',
      '#value' => $captacion_nid,
    );
    $form['captador_uid'] = array(
      '#type' => 'hidden',
      '#value' => $uid = \Drupal::currentUser()->id(),
    );
    $form['captacion_date'] = array(
      '#type' => 'hidden',
      '#value' => $captacion_node->created->value,
    );

    $form['field_factura_servicios']['widget']['add_more_button_servicio']['#value'] = t('AÃ±adir otro servicio');


    $username_for_factura_title = $cliente_data->get('field_nombre')->value;
    $username_for_factura_title .= (isset($cliente_data->get('field_apellido')->value)) ? ' ' . $cliente_data->get('field_apellido')->value : '';
    $last_factura_title = get_last_factura();
    $last_factura_number = (int) filter_var($last_factura_title, FILTER_SANITIZE_NUMBER_INT);
    $new_factura_number = (int)$last_factura_number + 1;

    $form['title']['widget'][0]['value']['#default_value'] = $username_for_factura_title . ' ' . $new_factura_number;
    $form['title']['#attributes']['class'][] = 'hidden';

    // Set default for current captacion and css hide it.
    $form['field_factura']['widget'][0]['target_id']['#default_value'] = \Drupal\node\Entity\Node::load($captacion_nid);
    $form['field_factura']['#attributes']['class'][] = 'hidden';
    $form['field_factura_pagada']['#access'] = FALSE;

    unset($form['revision_information']);
    unset($form['revision_log']);
    // following causes a nasty bug: when submitting
    // a factura with multiple servicios (paragraph type)
    // the form prompts you to confirm removal of first servicio added!
    // Let's leave it then commented out...
    // $form['actions']['submit']['#value'] = t('Crear factura / proforma');

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        array_unshift($form['actions'][$action]['#submit'], 'send_email_secretaria');

        // Store in custom carbray_facturas table.
        $form['actions'][$action]['#submit'][] = 'store_carbray_facturas';
      }
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function carbray_form_alter(&$form, FormStateInterface $form_state) {
  switch ($form['#id']) {
    case 'views-exposed-form-clientes-por-fase-page-1':
      $form['actions']['submit']['#attributes']['class'][] = 'btn-primary';
//      $form['#attributes']['class'][] = 'block';
      break;

    case 'user-form':
      // Hide display name field from user edit form.
      $form['account']['name']['#access'] = FALSE;

      // If editing an internal user/carbray admin, unset non relevant fields.
      $is_internal_user = FALSE;
      $is_user_resetting_pwd = FALSE;
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      $form_owner_uid = 0;
      foreach ($path_args as $path_arg) {
        if (is_numeric($path_arg)) {
          $form_owner_uid = $path_arg;
        }
      }
      $form_owner_user = User::load($form_owner_uid);
      $form_owner_roles = $form_owner_user->getRoles();
      if (in_array('worker', $form_owner_roles) || in_array('carbray_administrator', $form_owner_roles) || in_array('jefe_departamento', $form_owner_roles)) {
        $is_internal_user = TRUE;
      }

      if (!$is_internal_user) {
        $form['field_departamento']['#access'] = FALSE;
      }

      // An internal user must not see/populate clients related fields. A user resetting pwd does must not see anything else than password reset box.
      $pass_token = \Drupal::request()->query->get('pass-reset-token');
      if ($pass_token) {
        $is_user_resetting_pwd = TRUE;
      }
      if ($is_internal_user || $is_user_resetting_pwd) {
        $form = _hide_user_form_fields($form, $is_user_resetting_pwd);

      }
      // If user lands on profile form after requesting new pwd and
      // clicking on one time login link...
      if ($is_user_resetting_pwd) {
        // Hide everything but pwd reset!
        $form = _hide_everything_but_pwd($form);
        // Add submit handler that redirects after pwd save to the right landing page based on user role.
        foreach (array_keys($form['actions']) as $action) {
          if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
            $form['actions']['submit']['#submit'][] = '_carbray_user_login_redirecter';
          }
        }
      }

      // A user of role Worker (uid 16) can't edit another user Worker/Carbray admin by guessing url (user/18/edit).
      $current_user = \Drupal::currentUser();
      $current_user_roles = $current_user->getRoles();
      // @todo: can carbray admins edit Workers? if they cant, add to following line extra OR test for carbray_administrator.
      if (in_array('worker', $current_user_roles)) {
        if ($form_owner_uid != $current_user->id()) {
          if (in_array('carbray_administrator', $form_owner_roles) || in_array('worker', $form_owner_roles)) {
            throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
          }
        }
      }

      // A user of role Worker can not edit another user's password etc.
      if (in_array('worker', $current_user_roles) && !$is_user_resetting_pwd) {
        $form['account']['pass']['#access'] = FALSE;
        $form['field_notas']['#access'] = FALSE;
      }

      break;
    case 'node-objetivos-form':
    case 'node-objetivos-edit-form':
      // Hide Objetivo title field.
      $form['title']['#access'] = FALSE;
      // Add custom validate handler.
      $form['#validate'][] = 'either_trabajador_or_departamento';
      // @todo add another handler to deal with already existing in current timeframe objetivos for this entity.
      break;
    case 'user-pass-reset':
      $form['#attributes']['class'][] = 'block';
      break;

    case 'node-plantilla-propuesta-form':
    case 'node-plantilla-propuesta-edit-form':
      $form['path']['#access'] = FALSE;
      $form['revision_log']['#access'] = FALSE;
      $form['#attributes']['class'][] = 'block';
      break;
    case 'node-propuesta-plantilla-form':
    case 'node-propuesta-plantilla-edit-form':
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'redirect_to_manage_propuestas';
      }
    }
      break;
    case 'user-cancel-form':
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'redirect_on_delete_user';
        }
      }
      break;
    case 'node-captacion-edit-form':
      unset($form['revision_information']);
      unset($form['revision_log']);
      unset($form['field_captacion_nota']);
      $form['title']['#attributes']['class'][] = 'hidden';
      unset($form['field_captacion_cliente']);
      // Ensure created date can be edited by users.
      $form['created']['#access'] = TRUE;

      // Unset estado captacion entity_autocomplete and use instead a custom defined select.
      unset($form['field_captacion_estado_captacion']);
      // Query for all estados de captaction terms.
      $estados_options = get_taxonomy_terms_options('estado_de_captacion');
      $form['estado'] = array(
        '#type' => 'select',
        '#title' => 'Cambiar estado',
        '#empty_option' => ' - Selecciona estado captacion - ',
        '#options' => $estados_options,
        '#weight' => 25,
      );

      // Captador node form field seems to be erroring on submit, let's hide it for now, as captador
      // can be edited on its dedicated form modal on node captacion page...
      unset($form['field_captacion_captador']);

      // Hide 'nueva revision' checkbox for users.
      hide($form['revision']);


      // Get this captacion's estado de captacion.
      $db = \Drupal::database();
      $sql = "SELECT field_captacion_estado_captacion_target_id FROM node__field_captacion_estado_captacion WHERE entity_id = :nid";
      $node = \Drupal::routeMatch()->getParameter('node');
      $default_estado = $db->query($sql, array(':nid' => $node->id()))->fetchCol();
      if ($default_estado) {
        $form['estado']['#default_value'] = $default_estado;
      }

      $form['nid'] = [
        '#type' => 'hidden',
        '#value' => $node->id(),
      ];

      // Define our custom submit hanlder that saves estado captacion and tematica.
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'captacion_save_estado';
        }
      }

      break;
  }
}

function store_carbray_facturas(array &$form, FormStateInterface $form_state) {
  $factura_nid = $form_state->getValue('nid');
  if ($factura_nid) {
    try {
      \Drupal::database()->insert('carbray_facturas_registro')
        ->fields([
          'factura_nid',
          'captacion_nid',
          'author_uid',
        ])
        ->values(array(
          $factura_nid,
          $form_state->getValue('captacion_nid'),
          $form_state->getValue('captador_uid'),
        ))
        ->execute();
    } catch (Exception $e) {
      watchdog_exception('carbray', $e);
    }
  }
}

function redirect_to_manage_propuestas() {
  $response = new RedirectResponse('/edit-propuesta-plantillas');
  $response->send();
}

function redirect_on_delete_user($form, FormStateInterface $form_state) {
  // Finally redirect to home.
  $url = Url::fromUri('entity:node/33');
  $form_state->setRedirectUrl($url);
}

function captacion_save_estado(array &$form, FormStateInterface $form_state) {
  $estado = $form_state->getValue('estado');
  $nid = $form_state->getValue('nid');
  $captacion = Node::load($nid);
  $previous_status = $captacion->get('field_captacion_estado_captacion')->getValue();
  $captacion->set('field_captacion_estado_captacion', $estado);
  $captacion->save();

  if ($previous_status[0]['target_id'] != $estado) {
    // Insert into log of estado captacion changes.
    $values_to_save = [
      'nid' => $nid,
      'previous_status' => $previous_status[0]['target_id'],
      'new_status' => $estado,
    ];
    log_estado_captacion_change($values_to_save);
  }

  // Redirect to captacion node.
  $url = Url::fromRoute('entity.node.canonical', array('node' => $nid));
  $form_state->setRedirectUrl($url);
}

/**
 * Custom validate handler to ensure only trabajador or departamento are filled in by admin BUT NOT BOTH.
 */
function either_trabajador_or_departamento(array &$form, FormStateInterface $form_state) {
  $trabajador_uid = $form_state->getValue('field_objetivo_trabajador');
  $trabajador_uid = $trabajador_uid[0]['target_id'];

  $departamento_tid = $form_state->getValue('field_objetivo_departamento');
  $departamento_tid = $departamento_tid[0]['target_id'];

  // User filled in both departamento and trabajador fields: throw error.
  if ($trabajador_uid && $departamento_tid) {
    $form_state->setErrorByName('field_objetivo_trabajador', t('Has rellenado el objetivo para un trabajador y departamento al mismo tiempo; un objetivo solo puede ser para uno u otro, rellena un campo y otro pero no ambos.'));
  }
}

/**
 * Implements hook_node_presave().
 */
function carbray_node_presave(Drupal\Core\Entity\EntityInterface $node) {
  switch ($node->getType()) {
    case 'objetivos':
      /**
       * Dynamically populate objetivo title based on entered node fields.
       */
      $trabajador_uid = $node->get('field_objetivo_trabajador')->getValue();
      $trabajador_uid = ($trabajador_uid) ? $trabajador_uid[0]['target_id'] : $trabajador_uid;

      $departamento_tid = $node->get('field_objetivo_departamento')
        ->getValue();
      $departamento_tid = ($departamento_tid) ? $departamento_tid[0]['target_id'] : $departamento_tid;

      $fecha_inicio = $node->get('field_objetivo_fecha_inicio')->value;
      $f1 = strtotime($fecha_inicio);
      $format = "d-M-Y";
      $formatted_fecha_inicio = date($format, $f1);

      $fecha_final = $node->get('field_objetivo_fecha_final')->value;
      $f2 = strtotime($fecha_final);
      $formatted_fecha_final = date($format, $f2);

      $collected_title = '';
      if ($trabajador_uid) {
        $account = User::load($trabajador_uid);
        $nombre = $account->get('field_nombre')->value;
        $apellido = $account->get('field_apellido')->value;
        $collected_title .= $nombre . ' ' . $apellido;
      }
      if ($departamento_tid) {
        $term = Term::load($departamento_tid);
        $departamento_nombre = $term->get('name')->value;
        $collected_title .= $departamento_nombre;
      }

      $collected_title .= ' de ' . $formatted_fecha_inicio . ' a ' . $formatted_fecha_final;

      $node->title = $collected_title;
      break;
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function carbray_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['#prefix'] = t('<h2>Log in to Carbray</h2>');
  // Adds placeholder text to login form inputs.
  $form['name']['#attributes']['placeholder'] = t('Email address');
  $form['pass']['#attributes']['placeholder'] = t('Password');

  // Adds a 'forgot your password' link to the form.
  $url = Url::fromRoute('user.pass');
  $new_pwd_link = Link::fromTextAndUrl(t('Forgot your password?'), $url);
  $form['actions']['submit']['#field_suffix'] = $new_pwd_link;

  // Add our custom handler to redirect after login.
  // @todo: not only redirect on login! redirect also when accesing front path and user is authenticated, otherwise the form keeps showing! user should be taken to their landing path!
  $form['#submit'][] = '_carbray_user_login_redirecter';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function carbray_form_user_pass_alter(&$form, FormStateInterface $form_state) {
  $form['#prefix'] = t('<h2>Request new password</h2>');
  $form['actions']['submit']['#value'] = t('Send instructions by email');
  $form['actions']['submit']['#attributes'] = array('class' => array('btn-primary'));
}

/**
 * Handles hiding fields on user form.
 * @param $form
 * @param bool $is_user_reset
 * @return mixed
 */
function _hide_user_form_fields($form, $is_user_reset = FALSE) {
  $form['field_fecha_alta']['#access'] = FALSE;
  $form['field_identificacion']['#access'] = FALSE;
  $form['field_notas']['#access'] = FALSE;
  $form['field_email']['#access'] = FALSE;
  $form['field_procedencia']['#access'] = FALSE;
  // A user can't delete his own account.
  $form['actions']['delete']['#access'] = FALSE;
  return $form;
}

/**
 * Hides all but pwd reset fields on user form.
 * @param $form
 * @return mixed
 */
function _hide_everything_but_pwd($form) {
  $form['field_nombre']['#access'] = FALSE;
  $form['field_apellido']['#access'] = FALSE;
  $form['field_departamento']['#access'] = FALSE;
  $form['field_direccion']['#access'] = FALSE;
  $form['field_fax']['#access'] = FALSE;
  $form['field_fecha_alta']['#access'] = FALSE;
  $form['field_pais']['#access'] = FALSE;
  $form['field_telefono']['#access'] = FALSE;
  $form['account']['status']['#access'] = FALSE;
  $form['account']['mail']['#access'] = FALSE;
  $form['account']['roles']['#access'] = FALSE;
  $form['account']['notify']['#access'] = FALSE;
  $form['field_procedencia']['#access'] = FALSE;
  return $form;
}
/**
 * Form submission handler for user_login_form().
 *
 * Redirects the user based on role to various dashboards after logging in.
 */
function _carbray_user_login_redirecter(&$form, FormStateInterface $form_state) {
  $url = _carbray_redirecter();
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the password field when admin is creating an account.
 */
function carbray_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['administer_users']['#value']) {
    // Set default status value to blocked user.
    // @todo: need a quick and easy way to allow admin to activate users and trigger an email to invite them to setup their password.
    // @todo: need to disable most of user fields for end user, not to allow them to change field values (other than password through front end, etc.)
    $form['account']['status']['#default_value'] = 0;

    $form['account']['pass']['#access'] = FALSE;
    $form['account']['pass']['#value']['pass1'] = user_password();
    $form['account']['pass']['#value']['pass2'] = $form['account']['pass']['#value']['pass1'];
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Adds the carbray.global-styles library to the page to solve admin theme styling
 * without having to resort to create a custom subtheme.
 *
 * @param array $attachments
 */
function carbray_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'carbray/carbray.global-styles';
  $attachments['#attached']['library'][] = 'carbray/carbray.global-styles';
  //    $form['#attached']['library'][] = 'carbray.carbray_timer';

}

/**
 * Implements template_preprocess_page().
 *
 * @param $variables
 */
function carbray_preprocess_page(&$variables) {

  // Redirect logged in user accessing front page.
  if ($variables['is_front'] && $variables['logged_in']) {
    $url = _carbray_redirecter();
    $response = new RedirectResponse($url, 302);
    $response->send();
  }
}

function _carbray_redirecter() {
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  // If user with only 1 role and it is authenticated:
  if (in_array('authenticated', $roles) && count($roles) == 1) {
    // Redirect to abogado home;
    // Even though abogado has its dedicated role ('worker'),
    // if by any chance admin creating an abogado forgets to tick the role checkbox
    // it falls to this scenario and we need to have a $url otherwise it errors!
    // @todo: when opening up for clients access this will need to be updated!
    $url = Url::fromUri('entity:node/2');
  }
  elseif (in_array('worker', $roles)) {
    $url = Url::fromUri('entity:node/2');
  }
  elseif (in_array('secretaria', $roles)) {
    $url = Url::fromRoute('carbray_facturacion.facturas_por_pagar');
  }
  elseif (in_array('carbray_administrator', $roles)) {
    $url = Url::fromUri('entity:node/33');
  }
  else {
    $url = Url::fromUri('entity:node/3');
  }
  return $url;
}

/**
 * Implements hook_entity_view_alter().
 */
function carbray_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Entities not meant to be accessed/viewable on front end.
  $entities_to_redirect = array(
//    'objetivos',
    'factura',
  );
  if (in_array($entity->bundle(), $entities_to_redirect)) {
    // @todo: tidy up this, is it needed??
    $url = Url::fromRoute('views_ui.add', [], ['absolute' => TRUE]);
    drupal_set_message(t('You have been redirected because...'), 'status', TRUE);
//    $response = new RedirectResponse($url->getRouteName());
    $response = new RedirectResponse('/worker');
    $response->send();
  }
}

/**
 * Implements template_preprocess_views_view_field().
 */
function carbray_preprocess_views_view_field(&$variables) {
  // Options to target the field you're after; from https://www.drupal.org/node/2593515#comment-10569248
  // 1) get the field name : $variables['field']->realField
  // 2) get the field value : $variables['field']->getValue($variables['row'])
  // 3) get the field classes in the view : $variables['field']->elementClasses()
//  $user = $variables['row']->_entity;
//  $uid = $user->id();
//  $field = $variables['field']->realField;
//  $field_class = $variables['field']->elementClasses();
//  if ($field == 'field_user_estado_de_captacion_target_id' && $field_class == 'estado-captacion') {
//    $form = \Drupal::formBuilder()->getForm('Drupal\carbray\Form\AssignEstadoCaptacion', $uid);
//    $variables['output'] = $form;
//  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 * @param $data
 * @param $route_name
 */
function carbray_menu_local_tasks_alter(&$data, $route_name) {
  // Users with worker role must not see 'view / edit' local task tabs when browsing other worker and carbray admin users at e.g /user/13.
  $routes = ['entity.user.canonical'];
  if (in_array($route_name, $routes)) {
    // Get logged in user's role.
    $current_user = \Drupal::currentUser();
    $current_user_uid = $current_user->id();
    $roles = $current_user->getRoles();
    if (in_array('worker', $roles)) {
      // Get user uid from url arg.
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      $uid = 0;
      foreach ($path_args as $path_arg) {
        if (is_numeric($path_arg)) {
          $uid = $path_arg;
        }
      }
      // If currently logged in worker's uid and url's %uid do not match unset tabs.
      if ($uid != $current_user_uid) {
        foreach ($data['tabs'][0] as $key => $value) {
          unset($data['tabs'][0][$key]);
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_node().
 *
 * @param $variables
 */
function carbray_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $nid = $node->id();
  // Landing pages for Carbray workers/administrators add ProgressBar element.
  if ($nid == '2' || $nid == '3') {
    $logged_in_worker_uid = \Drupal::currentUser()->id();

    $progress = new ProgressBar('user');
    $progress->getTrabajadorObjetivo($logged_in_worker_uid);
    if (!$progress->cifra) {
      $variables['objetivo'] = t('Este trabajador no tiene objetivo actual creado todavia.');
    }
    else {
      $variables['titulo_objetivo'] = 'Objetivo de ' . $progress->fecha_inicio . ' a ' . $progress->fecha_final;
      $variables['objetivo'] = $progress->buildArray();
    }

  }
}

/**
 * Finds whether there is a match for the email in the system.
 *
 * @param $email
 * @return mixed
 */
function email_already_in_system($email) {

  $found = \Drupal::database()->query("SELECT mail from {users_field_data} WHERE mail = :mail", array(
    ':mail' => $email
  ))->fetchAssoc();

  return $found;
}

/**
 * Finds whether there is a match for the phone in the system.
 *
 * @param $phone string
 * @return mixed
 */
function phone_already_in_system($phone) {

  $found = \Drupal::database()->query("SELECT entity_id from {user__field_telefono} WHERE field_telefono_value = :phone", array(
    ':phone' => $phone
  ))->fetchAssoc();

  return $found;
}

/**
 * @param bool $just_active
 *    Flags whether the query should bring results only for active users.
 * @return mixed
 */
function get_carbray_workers($just_active = FALSE, $by_role = '') {
  $db = \Drupal::database();
  $sql = "SELECT uid, mail FROM users_field_data ufd INNER JOIN user__roles ur on ur.entity_id = ufd.uid";
  if ($by_role) {
    $sql .= " WHERE roles_target_id = 'secretaria'";
  }
  else {
    $sql .= " WHERE (roles_target_id = 'carbray_administrator' OR roles_target_id = 'worker' OR roles_target_id = 'secretaria' OR roles_target_id = 'jefe_departamento')";
  }
  if ($just_active) {
    $sql .= ' AND status = 1';
  }
  $sql .= ' ORDER BY mail ASC';

  return $db->query($sql)->fetchAllKeyed();
}

function carbray_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'propuesta') {
    //$build['#attached']['library'][] =  'carbray/carbray.propuesta-styles';
  }
}

function get_children_of_parent_term($tid, $taxonomy) {
  // Get child terms of currently selected parent $tid.
  $child_terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($taxonomy, $tid, 1);
  return $child_terms;
}

function get_parent_of_child_term($tid) {
  // Get parent term of given child $tid.
  $ancestors =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($tid);
  $parent = end($ancestors);
  $parent_label = '';
  if ($parent) {
    $parent_label = $parent->label();
  }
  // If you need the id:
  // $parent->id();
  return $parent_label;
}

/**
 * Helper function to get the node title without loading the whole node object.
 */
function get_node_title($nid) {
  return \Drupal::database()->query('SELECT title FROM node_field_data WHERE nid = :nid', array(':nid' => $nid))->fetchField();
}

/**
 * Returns term id and name for all available terms in a given vocabulary.
 *
 * @param $vocabulary
 *   String referencing the vocabulary name.
 *
 * @return $options
 *   Array
 */
function get_taxonomy_terms_options($vocabulary) {
  // Query for all estados de captaction terms.
  $db = \Drupal::database();
  $sql = "SELECT tid FROM taxonomy_term_field_data WHERE vid= :vid";
  $tids = $db->query($sql, array(':vid' => $vocabulary))->fetchCol();

  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadMultiple($tids);

  $options = [];
  foreach ($terms as $term) {
    $options[$term->id()] = $term->name->value;
  }
  return $options;
}

function code_to_country($code) {

  $code = strtoupper($code);

  $countryList = array(
    'AF' => 'Afghanistan',
    'AX' => 'Aland Islands',
    'AL' => 'Albania',
    'DZ' => 'Algeria',
    'AS' => 'American Samoa',
    'AD' => 'Andorra',
    'AO' => 'Angola',
    'AI' => 'Anguilla',
    'AQ' => 'Antarctica',
    'AG' => 'Antigua and Barbuda',
    'AR' => 'Argentina',
    'AM' => 'Armenia',
    'AW' => 'Aruba',
    'AU' => 'Australia',
    'AT' => 'Austria',
    'AZ' => 'Azerbaijan',
    'BS' => 'Bahamas the',
    'BH' => 'Bahrain',
    'BD' => 'Bangladesh',
    'BB' => 'Barbados',
    'BY' => 'Belarus',
    'BE' => 'Belgium',
    'BZ' => 'Belize',
    'BJ' => 'Benin',
    'BM' => 'Bermuda',
    'BT' => 'Bhutan',
    'BO' => 'Bolivia',
    'BA' => 'Bosnia and Herzegovina',
    'BW' => 'Botswana',
    'BV' => 'Bouvet Island (Bouvetoya)',
    'BR' => 'Brazil',
    'IO' => 'British Indian Ocean Territory (Chagos Archipelago)',
    'VG' => 'British Virgin Islands',
    'BN' => 'Brunei Darussalam',
    'BG' => 'Bulgaria',
    'BF' => 'Burkina Faso',
    'BI' => 'Burundi',
    'KH' => 'Cambodia',
    'CM' => 'Cameroon',
    'CA' => 'Canada',
    'CV' => 'Cape Verde',
    'KY' => 'Cayman Islands',
    'CF' => 'Central African Republic',
    'TD' => 'Chad',
    'CL' => 'Chile',
    'CN' => 'China',
    'CX' => 'Christmas Island',
    'CC' => 'Cocos (Keeling) Islands',
    'CO' => 'Colombia',
    'KM' => 'Comoros the',
    'CD' => 'Congo',
    'CG' => 'Congo the',
    'CK' => 'Cook Islands',
    'CR' => 'Costa Rica',
    'CI' => 'Cote d\'Ivoire',
    'HR' => 'Croatia',
    'CU' => 'Cuba',
    'CY' => 'Cyprus',
    'CZ' => 'Czech Republic',
    'DK' => 'Denmark',
    'DJ' => 'Djibouti',
    'DM' => 'Dominica',
    'DO' => 'Dominican Republic',
    'EC' => 'Ecuador',
    'EG' => 'Egypt',
    'SV' => 'El Salvador',
    'GQ' => 'Equatorial Guinea',
    'ER' => 'Eritrea',
    'EE' => 'Estonia',
    'ET' => 'Ethiopia',
    'FO' => 'Faroe Islands',
    'FK' => 'Falkland Islands (Malvinas)',
    'FJ' => 'Fiji the Fiji Islands',
    'FI' => 'Finland',
    'FR' => 'France, French Republic',
    'GF' => 'French Guiana',
    'PF' => 'French Polynesia',
    'TF' => 'French Southern Territories',
    'GA' => 'Gabon',
    'GM' => 'Gambia the',
    'GE' => 'Georgia',
    'DE' => 'Germany',
    'GH' => 'Ghana',
    'GI' => 'Gibraltar',
    'GR' => 'Greece',
    'GL' => 'Greenland',
    'GD' => 'Grenada',
    'GP' => 'Guadeloupe',
    'GU' => 'Guam',
    'GT' => 'Guatemala',
    'GG' => 'Guernsey',
    'GN' => 'Guinea',
    'GW' => 'Guinea-Bissau',
    'GY' => 'Guyana',
    'HT' => 'Haiti',
    'HM' => 'Heard Island and McDonald Islands',
    'VA' => 'Holy See (Vatican City State)',
    'HN' => 'Honduras',
    'HK' => 'Hong Kong',
    'HU' => 'Hungary',
    'IS' => 'Iceland',
    'IN' => 'India',
    'ID' => 'Indonesia',
    'IR' => 'Iran',
    'IQ' => 'Iraq',
    'IE' => 'Ireland',
    'IM' => 'Isle of Man',
    'IL' => 'Israel',
    'IT' => 'Italy',
    'JM' => 'Jamaica',
    'JP' => 'Japan',
    'JE' => 'Jersey',
    'JO' => 'Jordan',
    'KZ' => 'Kazakhstan',
    'KE' => 'Kenya',
    'KI' => 'Kiribati',
    'KP' => 'Korea',
    'KR' => 'Korea',
    'KW' => 'Kuwait',
    'KG' => 'Kyrgyz Republic',
    'LA' => 'Lao',
    'LV' => 'Latvia',
    'LB' => 'Lebanon',
    'LS' => 'Lesotho',
    'LR' => 'Liberia',
    'LY' => 'Libyan Arab Jamahiriya',
    'LI' => 'Liechtenstein',
    'LT' => 'Lithuania',
    'LU' => 'Luxembourg',
    'MO' => 'Macao',
    'MK' => 'Macedonia',
    'MG' => 'Madagascar',
    'MW' => 'Malawi',
    'MY' => 'Malaysia',
    'MV' => 'Maldives',
    'ML' => 'Mali',
    'MT' => 'Malta',
    'MH' => 'Marshall Islands',
    'MQ' => 'Martinique',
    'MR' => 'Mauritania',
    'MU' => 'Mauritius',
    'YT' => 'Mayotte',
    'MX' => 'Mexico',
    'FM' => 'Micronesia',
    'MD' => 'Moldova',
    'MC' => 'Monaco',
    'MN' => 'Mongolia',
    'ME' => 'Montenegro',
    'MS' => 'Montserrat',
    'MA' => 'Morocco',
    'MZ' => 'Mozambique',
    'MM' => 'Myanmar',
    'NA' => 'Namibia',
    'NR' => 'Nauru',
    'NP' => 'Nepal',
    'AN' => 'Netherlands Antilles',
    'NL' => 'Netherlands the',
    'NC' => 'New Caledonia',
    'NZ' => 'New Zealand',
    'NI' => 'Nicaragua',
    'NE' => 'Niger',
    'NG' => 'Nigeria',
    'NU' => 'Niue',
    'NF' => 'Norfolk Island',
    'MP' => 'Northern Mariana Islands',
    'NO' => 'Norway',
    'OM' => 'Oman',
    'PK' => 'Pakistan',
    'PW' => 'Palau',
    'PS' => 'Palestinian Territory',
    'PA' => 'Panama',
    'PG' => 'Papua New Guinea',
    'PY' => 'Paraguay',
    'PE' => 'Peru',
    'PH' => 'Philippines',
    'PN' => 'Pitcairn Islands',
    'PL' => 'Poland',
    'PT' => 'Portugal, Portuguese Republic',
    'PR' => 'Puerto Rico',
    'QA' => 'Qatar',
    'RE' => 'Reunion',
    'RO' => 'Romania',
    'RU' => 'Russian Federation',
    'RW' => 'Rwanda',
    'BL' => 'Saint Barthelemy',
    'SH' => 'Saint Helena',
    'KN' => 'Saint Kitts and Nevis',
    'LC' => 'Saint Lucia',
    'MF' => 'Saint Martin',
    'PM' => 'Saint Pierre and Miquelon',
    'VC' => 'Saint Vincent and the Grenadines',
    'WS' => 'Samoa',
    'SM' => 'San Marino',
    'ST' => 'Sao Tome and Principe',
    'SA' => 'Saudi Arabia',
    'SN' => 'Senegal',
    'RS' => 'Serbia',
    'SC' => 'Seychelles',
    'SL' => 'Sierra Leone',
    'SG' => 'Singapore',
    'SK' => 'Slovakia (Slovak Republic)',
    'SI' => 'Slovenia',
    'SB' => 'Solomon Islands',
    'SO' => 'Somalia, Somali Republic',
    'ZA' => 'South Africa',
    'GS' => 'South Georgia and the South Sandwich Islands',
    'ES' => 'Spain',
    'LK' => 'Sri Lanka',
    'SD' => 'Sudan',
    'SR' => 'Suriname',
    'SJ' => 'Svalbard & Jan Mayen Islands',
    'SZ' => 'Swaziland',
    'SE' => 'Sweden',
    'CH' => 'Switzerland, Swiss Confederation',
    'SY' => 'Syrian Arab Republic',
    'TW' => 'Taiwan',
    'TJ' => 'Tajikistan',
    'TZ' => 'Tanzania',
    'TH' => 'Thailand',
    'TL' => 'Timor-Leste',
    'TG' => 'Togo',
    'TK' => 'Tokelau',
    'TO' => 'Tonga',
    'TT' => 'Trinidad and Tobago',
    'TN' => 'Tunisia',
    'TR' => 'Turkey',
    'TM' => 'Turkmenistan',
    'TC' => 'Turks and Caicos Islands',
    'TV' => 'Tuvalu',
    'UG' => 'Uganda',
    'UA' => 'Ukraine',
    'AE' => 'United Arab Emirates',
    'GB' => 'United Kingdom',
    'US' => 'United States of America',
    'UM' => 'United States Minor Outlying Islands',
    'VI' => 'United States Virgin Islands',
    'UY' => 'Uruguay, Eastern Republic of',
    'UZ' => 'Uzbekistan',
    'VU' => 'Vanuatu',
    'VE' => 'Venezuela',
    'VN' => 'Vietnam',
    'WF' => 'Wallis and Futuna',
    'EH' => 'Western Sahara',
    'YE' => 'Yemen',
    'ZM' => 'Zambia',
    'ZW' => 'Zimbabwe'
  );

  if (!$countryList[$code]) {
    return $code;
  }
  else {
    return $countryList[$code];
  }
}

function log_estado_captacion_change($values) {
  // Currently logged in user is making the estado change, let's log it.
  $uid = \Drupal::currentUser()->id();
  \Drupal::database()->insert('carbray_captacion_changes_log')
    ->fields([
      'nid',
      'previous_status',
      'new_status',
      'author',
      'created',
    ])
    ->values(array(
      $values['nid'],
      $values['previous_status'],
      $values['new_status'],
      $uid,
      time(),
    ))
    ->execute();
}

function contactos_captacion_content($clientes) {
  $rows = [];
  foreach ($clientes as $cliente) {
    $cliente_data = \Drupal::entityTypeManager()->getStorage('user')->load($cliente->uid);
    if (!$cliente_data) {
      continue;
    }

    $captacion_data = \Drupal::entityTypeManager()->getStorage('node')->load($cliente->captacion_nid);

    $estado_nombre = '';
    $term_entity = $captacion_data->field_captacion_estado_captacion->entity;
    if ($term_entity) {
      $term = Term::load($term_entity->id());
      $estado_nombre = $term->name->value;
    }

    $rows[] = array(
      print_cliente_link($cliente_data),
      print_cliente_captadores_responsables($captacion_data->get('field_captacion_captador')->getValue()),
      date('d-m-Y H:i:s', $captacion_data->created->value),
      $estado_nombre,
      ($cliente_data->getEmail()) ? $cliente_data->getEmail() : '',
      ($cliente_data->get('field_telefono')->value) ? $cliente_data->get('field_telefono')->value : '',
      print_captacion_link($cliente->captacion_nid),
    );
  }

  $header = array(
    'Nombre',
    'Captador',
    'Fecha captacion',
    'Estado captacion',
    'Email',
    'Telefono',
    'Ver captacion',
  );
  $build = array(
    '#type' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('Ningun cliente en captacion.'),
  );
  // Disable caching...
  $build['#cache']['max-age'] = 0;
  return $build;
}

function clientes_expedientes_content($clientes) {
  $rows = [];
  foreach ($clientes as $cliente) {
    $cliente_data = \Drupal::entityTypeManager()->getStorage('user')->load($cliente->uid);
    if (!$cliente_data) {
      continue;
    }

    $captacion_data = \Drupal::entityTypeManager()->getStorage('node')->load($cliente->captacion_nid);
    $estado_captacion = $captacion_data->get('field_captacion_estado_captacion')->entity;
    if ($estado_captacion->id() == CAPTACION_ARCHIVADA) {
      continue;
    }

    $expedientes = get_expedientes_for_captacion($cliente->captacion_nid);
    if (!$expedientes) {
      continue;
    }
    $expedientes_nids = array_values($expedientes);

    // @todo: add logic to allow for multiple captaciones for this cliente...
    $expediente_data = \Drupal::entityTypeManager()->getStorage('node')->load($expedientes_nids[0]);

    $tematicas = $expediente_data->get('field_expediente_tematica')->getValue();
    $tematica = reset($tematicas);

    $rows[] = array(
      print_cliente_link($cliente_data),
      print_cliente_captadores_responsables($captacion_data->get('field_captacion_captador')->getValue()),
      print_cliente_captadores_responsables($expediente_data->get('field_expediente_responsable')->getValue()),
      print_cliente_tematica($tematica),
      ($cliente_data->getEmail()) ? $cliente_data->getEmail() : '',
      ($cliente_data->get('field_telefono')->value) ? $cliente_data->get('field_telefono')->value : '',
      print_cliente_expedientes($expedientes_nids),
    );
  }

  $header = array(
    'Nombre',
    'Captador',
    'Responsable',
    'Tematica',
    'Email',
    'Telefono',
    'Expedientes',
  );
  $build = array(
    '#type' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('Ningun cliente en produccion.'),
  );
  // Disable caching...
  $build['#cache']['max-age'] = 0;
  return $build;
}

function get_departamento_workers($tid) {
  $dept_workers = \Drupal::entityQuery('user')
    ->condition('field_departamento', $tid, 'IN')
    ->sort('field_nombre', 'ASC')
    ->execute();
  return $dept_workers;
}

/**
 * Sorts array items ignoring accented text strings.
 * http://www.andrescampanario.es/es/blog/ordenar_array_alfabeticamente_teniendo_en_cuenta_acentos_en_php
 */
function sort_alphabetically($name1, $name2) {
  $patterns = array(
    'a' => '(Ã¡|Ã |Ã¢|Ã¤|Ã|Ã|Ã|Ã)',
    'e' => '(Ã©|Ã¨|Ãª|Ã«|Ã|Ã|Ã|Ã)',
    'i' => '(Ã­|Ã¬|Ã®|Ã¯|Ã|Ã|Ã|Ã)',
    'o' => '(Ã³|Ã²|Ã´|Ã¶|Ã|Ã|Ã|Ã)',
    'u' => '(Ãº|Ã¹|Ã»|Ã¼|Ã|Ã|Ã|Ã)'
  );
  $name1 = preg_replace(array_values($patterns), array_keys($patterns), $name1);
  $name2 = preg_replace(array_values($patterns), array_keys($patterns), $name2);
  return strcasecmp($name1, $name2);
}

/**
 * Helper to retrieve taxonomy term as options for a form select list.
 *
 * @param $vocabulary
 *   String referencing taxonomy vocabulary.
 */
function get_vocabulary_term_options($vocabulary) {
  $sql = "SELECT tid FROM taxonomy_term_field_data WHERE vid = :vocabulary ";
  $tids = \Drupal::database()->query($sql, [':vocabulary' => $vocabulary])->fetchCol();

  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadMultiple($tids);

  foreach ($terms as $term) {
    $options[$term->id()] = $term->name->value;
  }
  return $options;
}

/**
 * Builds a link to the CSV downloader.
 *
 * @param $routename
 *   String of route pointing to csv downloader.
 * @param $query_array
 *   Array containing query string arguments.
 *
 * @return \Drupal\Component\Render\MarkupInterface|string
 */
function get_csv_link($routename, $query_array) {
  $csv_url = Url::fromRoute($routename);
  $link_options = array(
    'attributes' => array(
      'class' => array(
        'btn',
        'btn-warning',
        'csv-button'
      ),
    ),
    'query' => array(
      $query_array,
    ),
  );
  $csv_url->setOptions($link_options);
  $link_to_csv_url = Link::fromTextAndUrl('Exportar CSV', $csv_url);
  $link_to_csv_string = $link_to_csv_url->toString()
    ->getGeneratedLink();
  $csv_link_markup = Markup::create($link_to_csv_string);
  return $csv_link_markup;
}
